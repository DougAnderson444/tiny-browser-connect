{"version":3,"mappings":"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","names":["ctx","this","d","b","Coder","length","encode","decode","URLSafeCoder","require$$0","wipe_1","require$$1","SHA256","hash","b64.encodeURLSafe","varint","int","equals","varint.encodingLength","varint.encodeTo","varint.decode","equalBytes","i","j","text","basex","base","baseCache","Digest.create","self","Digest.equals","Digest.decode","Digest.Digest","cache","cid","src","target"],"sources":["../../../../../../src/lib/WalletManager.svelte","../../../../../../node_modules/@stablelib/base64/lib/base64.js","../../../../../../node_modules/@stablelib/int/lib/int.js","../../../../../../node_modules/@stablelib/binary/lib/binary.js","../../../../../../node_modules/@stablelib/wipe/lib/wipe.js","../../../../../../node_modules/@stablelib/sha256/lib/sha256.js","../../../../../../src/lib/utils.js","../../../../../../src/lib/Contacts.svelte","../../../../../../node_modules/multiformats/vendor/varint.js","../../../../../../node_modules/multiformats/src/varint.js","../../../../../../node_modules/multiformats/src/bytes.js","../../../../../../node_modules/multiformats/src/hashes/digest.js","../../../../../../node_modules/multiformats/vendor/base-x.js","../../../../../../node_modules/multiformats/src/bases/base.js","../../../../../../node_modules/multiformats/src/bases/base58.js","../../../../../../node_modules/multiformats/src/bases/base32.js","../../../../../../node_modules/multiformats/src/cid.js","../../../../../../src/lib/Saver.svelte","../../../../../../src/lib/Repo.svelte","../../../../../../src/lib/Mount.svelte","../../../../../../src/lib/Demo.svelte"],"sourcesContent":["<script lang=\"ts\">\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\r\n\tlet wallet; // the variable you interact with the wallet functions\r\n\tlet Web3WalletMenu; // the Component variable\r\n\tlet RSAPublicKey: { kty: string; n: string; e: string; kid?: string } | null;\r\n\tlet Ed25519PublicKey: Uint8Array | null;\r\n\tlet ownerAddress: string | null;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tonMount(async () => {\r\n\t\t({ Web3WalletMenu } = await import('@peerpiper/web3-wallet-connector'));\r\n\t});\r\n\r\n\tasync function walletReady(e) {\r\n\t\twallet = e.detail.wallet;\r\n\t\townerAddress = await wallet?.arweaveWalletAPI?.getActiveAddress();\r\n\t\tRSAPublicKey = await wallet.arweaveWalletAPI.getActivePublicKey();\r\n\t\tEd25519PublicKey = await wallet.proxcryptor.getPublicKey();\r\n\t\tdispatch('RSAPublicKey', RSAPublicKey);\r\n\t\tdispatch('Ed25519PublicKey', Ed25519PublicKey);\r\n\t\tdispatch('ownerAddress', ownerAddress);\r\n\t}\r\n</script>\r\n\r\n<!-- Anywhere in your app, it will be fixed in the upper right hand corner of the page -->\r\n{#if Web3WalletMenu}\r\n\t<svelte:component this={Web3WalletMenu} on:walletReady={walletReady} />\r\n\t{#if wallet && RSAPublicKey && Ed25519PublicKey}\r\n\t\t<slot {wallet} {ownerAddress} {RSAPublicKey} {Ed25519PublicKey} />\r\n\t{/if}\r\n{/if}\r\n","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package base64 implements Base64 encoding and decoding.\n */\n// Invalid character used in decoding to indicate\n// that the character to decode is out of range of\n// alphabet and cannot be decoded.\nvar INVALID_BYTE = 256;\n/**\n * Implements standard Base64 encoding.\n *\n * Operates in constant time.\n */\nvar Coder = /** @class */ (function () {\n    // TODO(dchest): methods to encode chunk-by-chunk.\n    function Coder(_paddingCharacter) {\n        if (_paddingCharacter === void 0) { _paddingCharacter = \"=\"; }\n        this._paddingCharacter = _paddingCharacter;\n    }\n    Coder.prototype.encodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 8 + 5) / 6 | 0;\n        }\n        return (length + 2) / 3 * 4 | 0;\n    };\n    Coder.prototype.encode = function (data) {\n        var out = \"\";\n        var i = 0;\n        for (; i < data.length - 2; i += 3) {\n            var c = (data[i] << 16) | (data[i + 1] << 8) | (data[i + 2]);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            out += this._encodeByte((c >>> 1 * 6) & 63);\n            out += this._encodeByte((c >>> 0 * 6) & 63);\n        }\n        var left = data.length - i;\n        if (left > 0) {\n            var c = (data[i] << 16) | (left === 2 ? data[i + 1] << 8 : 0);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            if (left === 2) {\n                out += this._encodeByte((c >>> 1 * 6) & 63);\n            }\n            else {\n                out += this._paddingCharacter || \"\";\n            }\n            out += this._paddingCharacter || \"\";\n        }\n        return out;\n    };\n    Coder.prototype.maxDecodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 6 + 7) / 8 | 0;\n        }\n        return length / 4 * 3 | 0;\n    };\n    Coder.prototype.decodedLength = function (s) {\n        return this.maxDecodedLength(s.length - this._getPaddingLength(s));\n    };\n    Coder.prototype.decode = function (s) {\n        if (s.length === 0) {\n            return new Uint8Array(0);\n        }\n        var paddingLength = this._getPaddingLength(s);\n        var length = s.length - paddingLength;\n        var out = new Uint8Array(this.maxDecodedLength(length));\n        var op = 0;\n        var i = 0;\n        var haveBad = 0;\n        var v0 = 0, v1 = 0, v2 = 0, v3 = 0;\n        for (; i < length - 4; i += 4) {\n            v0 = this._decodeChar(s.charCodeAt(i + 0));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n            haveBad |= v2 & INVALID_BYTE;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (i < length - 1) {\n            v0 = this._decodeChar(s.charCodeAt(i));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n        }\n        if (i < length - 2) {\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            haveBad |= v2 & INVALID_BYTE;\n        }\n        if (i < length - 3) {\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (haveBad !== 0) {\n            throw new Error(\"Base64Coder: incorrect characters for decoding\");\n        }\n        return out;\n    };\n    // Standard encoding have the following encoded/decoded ranges,\n    // which we need to convert between.\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   43  47\n    //\n    // Encode 6 bits in b into a new character.\n    Coder.prototype._encodeByte = function (b) {\n        // Encoding uses constant time operations as follows:\n        //\n        // 1. Define comparison of A with B using (A - B) >>> 8:\n        //          if A > B, then result is positive integer\n        //          if A <= B, then result is 0\n        //\n        // 2. Define selection of C or 0 using bitwise AND: X & C:\n        //          if X == 0, then result is 0\n        //          if X != 0, then result is C\n        //\n        // 3. Start with the smallest comparison (b >= 0), which is always\n        //    true, so set the result to the starting ASCII value (65).\n        //\n        // 4. Continue comparing b to higher ASCII values, and selecting\n        //    zero if comparison isn't true, otherwise selecting a value\n        //    to add to result, which:\n        //\n        //          a) undoes the previous addition\n        //          b) provides new value to add\n        //\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 43);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 43) - 63 + 47);\n        return String.fromCharCode(result);\n    };\n    // Decode a character code into a byte.\n    // Must return 256 if character is out of alphabet range.\n    Coder.prototype._decodeChar = function (c) {\n        // Decoding works similar to encoding: using the same comparison\n        // function, but now it works on ranges: result is always incremented\n        // by value, but this value becomes zero if the range is not\n        // satisfied.\n        //\n        // Decoding starts with invalid value, 256, which is then\n        // subtracted when the range is satisfied. If none of the ranges\n        // apply, the function returns 256, which is then checked by\n        // the caller to throw error.\n        var result = INVALID_BYTE; // start with invalid character\n        // c == 43 (c > 42 and c < 44)\n        result += (((42 - c) & (c - 44)) >>> 8) & (-INVALID_BYTE + c - 43 + 62);\n        // c == 47 (c > 46 and c < 48)\n        result += (((46 - c) & (c - 48)) >>> 8) & (-INVALID_BYTE + c - 47 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    Coder.prototype._getPaddingLength = function (s) {\n        var paddingLength = 0;\n        if (this._paddingCharacter) {\n            for (var i = s.length - 1; i >= 0; i--) {\n                if (s[i] !== this._paddingCharacter) {\n                    break;\n                }\n                paddingLength++;\n            }\n            if (s.length < 4 || paddingLength > 2) {\n                throw new Error(\"Base64Coder: incorrect padding\");\n            }\n        }\n        return paddingLength;\n    };\n    return Coder;\n}());\nexports.Coder = Coder;\nvar stdCoder = new Coder();\nfunction encode(data) {\n    return stdCoder.encode(data);\n}\nexports.encode = encode;\nfunction decode(s) {\n    return stdCoder.decode(s);\n}\nexports.decode = decode;\n/**\n * Implements URL-safe Base64 encoding.\n * (Same as Base64, but '+' is replaced with '-', and '/' with '_').\n *\n * Operates in constant time.\n */\nvar URLSafeCoder = /** @class */ (function (_super) {\n    __extends(URLSafeCoder, _super);\n    function URLSafeCoder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // URL-safe encoding have the following encoded/decoded ranges:\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   45  95\n    //\n    URLSafeCoder.prototype._encodeByte = function (b) {\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 45);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 45) - 63 + 95);\n        return String.fromCharCode(result);\n    };\n    URLSafeCoder.prototype._decodeChar = function (c) {\n        var result = INVALID_BYTE;\n        // c == 45 (c > 44 and c < 46)\n        result += (((44 - c) & (c - 46)) >>> 8) & (-INVALID_BYTE + c - 45 + 62);\n        // c == 95 (c > 94 and c < 96)\n        result += (((94 - c) & (c - 96)) >>> 8) & (-INVALID_BYTE + c - 95 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    return URLSafeCoder;\n}(Coder));\nexports.URLSafeCoder = URLSafeCoder;\nvar urlSafeCoder = new URLSafeCoder();\nfunction encodeURLSafe(data) {\n    return urlSafeCoder.encode(data);\n}\nexports.encodeURLSafe = encodeURLSafe;\nfunction decodeURLSafe(s) {\n    return urlSafeCoder.decode(s);\n}\nexports.decodeURLSafe = decodeURLSafe;\nexports.encodedLength = function (length) {\n    return stdCoder.encodedLength(length);\n};\nexports.maxDecodedLength = function (length) {\n    return stdCoder.maxDecodedLength(length);\n};\nexports.decodedLength = function (s) {\n    return stdCoder.decodedLength(s);\n};\n//# sourceMappingURL=base64.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n    return (a + b) | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n    return (a - b) | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n    return x << n | x >>> (32 - n);\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n    return x << (32 - n) | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);\n};\n//# sourceMappingURL=int.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */\nvar int_1 = require(\"@stablelib/int\");\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;\n}\nexports.readInt16BE = readInt16BE;\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;\n}\nexports.readUint16BE = readUint16BE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;\n}\nexports.readInt16LE = readInt16LE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 1] << 8) | array[offset]) >>> 0;\n}\nexports.readUint16LE = readUint16LE;\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(2); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 8;\n    out[offset + 1] = value >>> 0;\n    return out;\n}\nexports.writeUint16BE = writeUint16BE;\nexports.writeInt16BE = writeUint16BE;\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(2); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    return out;\n}\nexports.writeUint16LE = writeUint16LE;\nexports.writeInt16LE = writeUint16LE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3];\n}\nexports.readInt32BE = readInt32BE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\nexports.readUint32BE = readUint32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset];\n}\nexports.readInt32LE = readInt32LE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset]) >>> 0;\n}\nexports.readUint32LE = readUint32LE;\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\nexports.writeUint32BE = writeUint32BE;\nexports.writeInt32BE = writeUint32BE;\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    out[offset + 2] = value >>> 16;\n    out[offset + 3] = value >>> 24;\n    return out;\n}\nexports.writeUint32LE = writeUint32LE;\nexports.writeInt32LE = writeUint32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var hi = readInt32BE(array, offset);\n    var lo = readInt32BE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);\n}\nexports.readInt64BE = readInt64BE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var hi = readUint32BE(array, offset);\n    var lo = readUint32BE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64BE = readUint64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var lo = readInt32LE(array, offset);\n    var hi = readInt32LE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);\n}\nexports.readInt64LE = readInt64LE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var lo = readUint32LE(array, offset);\n    var hi = readUint32LE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64LE = readUint64LE;\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n    writeUint32BE(value >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64BE = writeUint64BE;\nexports.writeInt64BE = writeUint64BE;\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    writeUint32LE(value >>> 0, out, offset);\n    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64LE = writeUint64LE;\nexports.writeInt64LE = writeUint64LE;\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintBE(bitLength, array, offset) {\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintBE = readUintBE;\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintLE(bitLength, array, offset) {\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for (var i = offset; i < offset + bitLength / 8; i++) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintLE = readUintLE;\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintBE(bitLength, value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(bitLength / 8); }\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintBE value must be an integer\");\n    }\n    var div = 1;\n    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintBE = writeUintBE;\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintLE(bitLength, value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(bitLength / 8); }\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintLE value must be an integer\");\n    }\n    var div = 1;\n    for (var i = offset; i < offset + bitLength / 8; i++) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintLE = writeUintLE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset);\n}\nexports.readFloat32BE = readFloat32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, true);\n}\nexports.readFloat32LE = readFloat32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset);\n}\nexports.readFloat64BE = readFloat64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, true);\n}\nexports.readFloat64LE = readFloat64LE;\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value);\n    return out;\n}\nexports.writeFloat32BE = writeFloat32BE;\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value, true);\n    return out;\n}\nexports.writeFloat32LE = writeFloat32LE;\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value);\n    return out;\n}\nexports.writeFloat64BE = writeFloat64BE;\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value, true);\n    return out;\n}\nexports.writeFloat64LE = writeFloat64LE;\n//# sourceMappingURL=binary.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sets all values in the given array to zero and returns it.\n *\n * The fact that it sets bytes to zero can be relied on.\n *\n * There is no guarantee that this function makes data disappear from memory,\n * as runtime implementation can, for example, have copying garbage collector\n * that will make copies of sensitive data before we wipe it. Or that an\n * operating system will write our data to swap or sleep image. Another thing\n * is that an optimizing compiler can remove calls to this function or make it\n * no-op. There's nothing we can do with it, so we just do our best and hope\n * that everything will be okay and good will triumph over evil.\n */\nfunction wipe(array) {\n    // Right now it's similar to array.fill(0). If it turns\n    // out that runtimes optimize this call away, maybe\n    // we can try something else.\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 0;\n    }\n    return array;\n}\nexports.wipe = wipe;\n//# sourceMappingURL=wipe.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nvar SHA256 = /** @class */ (function () {\n    function SHA256() {\n        /** Length of hash output */\n        this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */\n        this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._state = new Int32Array(8); // hash state\n        this._temp = new Int32Array(64); // temporary state\n        this._buffer = new Uint8Array(128); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA256.prototype._initState = function () {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    SHA256.prototype.reset = function () {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    SHA256.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._temp);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    SHA256.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < this.blockSize && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    SHA256.prototype.finish = function (out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this._buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for (var i = 0; i < this.digestLength / 4; i++) {\n            binary_1.writeUint32BE(this._state[i], out, i * 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */\n    SHA256.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */\n    SHA256.prototype.saveState = function () {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */\n    SHA256.prototype.restoreState = function (savedState) {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */\n    SHA256.prototype.cleanSavedState = function (savedState) {\n        wipe_1.wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA256;\n}());\nexports.SHA256 = SHA256;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    while (len >= 64) {\n        var a = v[0];\n        var b = v[1];\n        var c = v[2];\n        var d = v[3];\n        var e = v[4];\n        var f = v[5];\n        var g = v[6];\n        var h = v[7];\n        for (var i = 0; i < 16; i++) {\n            var j = pos + i * 4;\n            w[i] = binary_1.readUint32BE(p, j);\n        }\n        for (var i = 16; i < 64; i++) {\n            var u = w[i - 2];\n            var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (var i = 0; i < 64; i++) {\n            var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA256();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n//# sourceMappingURL=sha256.js.map","import * as b64 from '@stablelib/base64';\r\nimport { hash } from '@stablelib/sha256';\r\n\r\nexport function getArweaveAddress(jwk) {\r\n\t// get uint8array of the string\r\n\tconst bytes = b64.decodeURLSafe(jwk.n);\r\n\r\n\t// get the isomorphic hash of the asset as the tag\r\n\tconst hashed = hash(bytes); // make tag unique, so that it can go to a new owner without conflict\r\n\tconst hashB64 = b64.encodeURLSafe(new Uint8Array(hashed)).replace('=', '');\r\n\treturn hashB64;\r\n}\r\n\r\nexport function getAddress(Ed25519PublicKey) {\r\n\t// get the isomorphic hash of the asset as the tag\r\n\tconst hashed = hash(new Uint8Array(Ed25519PublicKey)); // make tag unique, so that it can go to a new owner without conflict\r\n\tconst hashB64 = b64.encodeURLSafe(new Uint8Array(hashed)).replace('=', '');\r\n\treturn hashB64;\r\n}\r\n","<script>\r\n\texport let Ed25519PublicKey;\r\n\texport let username;\r\n</script>\r\n\r\n<section class=\"flex flex-col bg-neutral-100 h-full w-1/3 break-words break-all justify-left\">\r\n\t<div class=\"flex flex-col items-left\">\r\n\t\tMy Stuff\r\n\t\t<!-- <Profile {Ed25519PublicKey} {username} /> -->\r\n\t</div>\r\n\t<div class=\"flex flex-col items-left\">My Contacts</div>\r\n\t<div class=\"flex flex-col items-left\">Online</div>\r\n</section>\r\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing alogrithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returs null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\texport let tag;\r\n\texport let tagNode;\r\n\texport let data;\r\n\texport let dag;\r\n\r\n\tlet states = {\r\n\t\tsaving: 'saving',\r\n\t\tsaveed: 'saved',\r\n\t\tready: null\r\n\t};\r\n\r\n\tlet state = null;\r\n\r\n\tasync function handleSave() {\r\n\t\tstate = 'saving';\r\n\t\tconsole.log(state, { data, tagNode });\r\n\t\tif (!data || !tagNode) return;\r\n\t\tconst dataCid = await dag.tx.addData({ value: data });\r\n\t\ttagNode.data = dataCid;\r\n\t\tconsole.log('saving tagNode', tagNode);\r\n\t\tawait dag.tx.add(tag, tagNode);\r\n\t\tconst buffer = await dag.tx.commit();\r\n\t\tdag = dag; // refresh svelte UI\r\n\t\tconsole.log('saved tagNode', dag.rootCID.toString());\r\n\r\n\t\tstate = 'saved';\r\n\t}\r\n\r\n\tfunction handleChange(e) {\r\n\t\tconsole.log(e.detail);\r\n\t\tdata = e.detail;\r\n\t\tstate = null;\r\n\t\t// save data as props to tag\r\n\t}\r\n</script>\r\n\r\n<button\r\n\tclass=\"flex-0 w-fit p-2 shadow-lg rounded-r-lg text-white font-semibold select-none {state ==\r\n\t'saved'\r\n\t\t? 'cursor-not-allowed bg-gray-400'\r\n\t\t: 'cursor-pointer bg-blue-500'}\"\r\n\ton:click={handleSave}\r\n\tdisabled={!data || state == 'saved'}\r\n>\r\n\t{state == 'saving' ? 'Saving' : state == 'saved' ? 'Saved' : 'Save'}\r\n</button>\r\n<slot {handleChange} />\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { CID } from 'multiformats/cid';\r\n\timport Saver from './Saver.svelte';\r\n\r\n\timport ContactCard from '../../../awesome-components-kit/src/lib/compiled/ContactCard.svelte.js?raw';\r\n\r\n\tlet dag;\r\n\tlet roots = [];\r\n\tlet rootObj;\r\n\tlet selectedTag = 'ContactCard';\r\n\tlet tagNode, esModule, props;\r\n\r\n\tlet handleRootCIDChange;\r\n\tlet saveToBrowser;\r\n\r\n\tonMount(async () => {\r\n\t\t// browser env, load the library now\r\n\t\tconst { createDag, createContactCard } = await import('./lib');\r\n\t\tdag = await createDag();\r\n\t\tdag.on('rootCID', (val) => handleRootCIDChange());\r\n\r\n\t\t// check if localstorage is available\r\n\t\tif (typeof localStorage !== 'undefined') {\r\n\t\t\tsaveToBrowser = (key, value) => localStorage.setItem(key, value);\r\n\t\t\tconst res = localStorage.getItem('ROOT_CID');\r\n\t\t\tif (res) {\r\n\t\t\t\tconst cid = CID.asCID(res) || CID.parse(res);\r\n\t\t\t\tif (cid) {\r\n\t\t\t\t\tdag.rootCID = cid;\r\n\t\t\t\t\troots = [...roots, cid.toString()];\r\n\t\t\t\t\tconsole.log('roots', roots);\r\n\t\t\t\t\trootObj = (await dag.get(cid)).value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\thandleRootCIDChange = async () => {\r\n\t\t\tconsole.log('handleRootCIDChange', dag.rootCID.toString());\r\n\t\t\tif (!dag.rootCID) return;\r\n\t\t\tconst cid = CID.asCID(dag.rootCID) || CID.parse(dag.rootCID);\r\n\t\t\tconsole.log('cid', cid);\r\n\t\t\tif (!cid) return;\r\n\r\n\t\t\t// update rootObj\r\n\t\t\trootObj = (await dag.get(cid)).value;\r\n\r\n\t\t\t// save rootCID to the browser if poss\r\n\t\t\tif (saveToBrowser) saveToBrowser('ROOT_CID', cid.toString());\r\n\r\n\t\t\troots = [...roots, cid.toString()];\r\n\r\n\t\t\tconsole.log('roots', roots);\r\n\t\t};\r\n\r\n\t\t// check if tag 'contactCard' already exists in the dag\r\n\t\t// if not, create it\r\n\t\tlet exists = false;\r\n\t\ttry {\r\n\t\t\texists = await dag.latest('ContactCard');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('tag does not exist, create it');\r\n\t\t}\r\n\r\n\t\tif (!exists) {\r\n\t\t\ttry {\r\n\t\t\t\tawait createContactCard(dag);\r\n\t\t\t\tdag = dag; // refresh svelte UI\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log('error creating contact card');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log('tag exists, load it');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\ttagNode = await dag.latest('ContactCard');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('error loading tag');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tprops = (await dag.latest('ContactCard', 'data')).value || null;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('No prop data, but thats ok');\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tesModule = (await dag.latest('ContactCard', 'compiled')).value;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('No compiled module, thats an issue');\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n{#if rootObj}\r\n\t<ul class=\"w-1/3 list-none\">\r\n\t\t{#each Object.keys(rootObj) as tag}\r\n\t\t\t<li\r\n\t\t\t\tclass=\"bg-neutral-600 w-full rounded m-4 p-4 cursor-pointer user-select-none\"\r\n\t\t\t\ton:click={(e) => (selectedTag = tag)}\r\n\t\t\t>\r\n\t\t\t\t{tag}\r\n\t\t\t</li>\r\n\t\t{/each}\r\n\t</ul>\r\n{/if}\r\n\r\n{#if esModule && selectedTag}\r\n\t<Saver let:handleChange tag={selectedTag} {dag} {tagNode}>\r\n\t\t<slot {handleChange} {esModule} {props} />\r\n\t</Saver>\r\n{/if}\r\n\r\n{#if roots}\r\n\t<div class=\"m-4 p-4\">\r\n\t\tShowing roots\r\n\t\t<div class=\"font-mono text-xs overflow-auto\">\r\n\t\t\t{#each roots as root}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{root}\r\n\t\t\t\t</div>\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t</div>\r\n{/if}\r\n","<script lang=\"ts\">\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\r\n\texport let src: string;\r\n\texport let props = null;\r\n\r\n\tlet target: HTMLElement;\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tonMount(async () => {\r\n\t\tif (!src) return;\r\n\t\tmountSrc({ text: src, target, props });\r\n\t});\r\n\r\n\tasync function mountSrc({\r\n\t\ttext,\r\n\t\ttarget,\r\n\t\tprops\r\n\t}: {\r\n\t\ttext: string;\r\n\t\ttarget: HTMLElement;\r\n\t\tprops: any;\r\n\t}) {\r\n\t\tdispatch('target', target);\r\n\t\tconst blob = new Blob([text], { type: 'text/javascript' });\r\n\t\tconst url = URL.createObjectURL(blob);\r\n\t\tconst App = (await import(/* @vite-ignore */ url)).default;\r\n\t\tdispatch('ready', App);\r\n\t\ttarget.innerHTML = '';\r\n\t\tconst app = new App({\r\n\t\t\ttarget,\r\n\t\t\tprops\r\n\t\t});\r\n\t\tif (url) URL.revokeObjectURL(url); // memory management\r\n\t\tdispatch('mounted', app);\r\n\t\tapp.$on('change', (evt: CustomEvent) => {\r\n\t\t\tdispatch('change', evt.detail);\r\n\t\t});\r\n\t\treturn app;\r\n\t}\r\n</script>\r\n\r\n<div bind:this={target} />\r\n","<script>\r\n\timport WalletManager from './WalletManager.svelte';\r\n\timport { onMount } from 'svelte';\r\n\timport { getAddress } from './utils';\r\n\timport Contacts from './Contacts.svelte';\r\n\timport Repo from './Repo.svelte';\r\n\timport Mount from './Mount.svelte';\r\n\r\n\tlet wallet;\r\n\tlet ownerAddress;\r\n\tlet RSAPublicKey;\r\n\tlet Ed25519PublicKey;\r\n\tlet base64URLEdwardsKey;\r\n\tlet connect;\r\n\tlet username;\r\n\tlet data;\r\n\r\n\tonMount(async () => {\r\n\t\t// browser env, load the library now\r\n\t\t({ connect } = await import('./lib'));\r\n\t});\r\n\r\n\tfunction keyConnect(e) {\r\n\t\tEd25519PublicKey = e.detail;\r\n\t\tusername = getAddress(Ed25519PublicKey); // username is hash of ed25519 public Key\r\n\r\n\t\tconnect({\r\n\t\t\tusername,\r\n\t\t\ttopic: 'peerpiper',\r\n\t\t\thandleConnect,\r\n\t\t\thandleClose,\r\n\t\t\thandleMsg\r\n\t\t});\r\n\t}\r\n\tfunction handleConnect() {}\r\n\tfunction handleClose() {}\r\n\tfunction handleMsg() {}\r\n</script>\r\n\r\n<WalletManager let:wallet let:ownerAddress let:RSAPublicKey on:Ed25519PublicKey={keyConnect} />\r\n<div class=\"flex flex-row h-screen\">\r\n\t<Contacts {Ed25519PublicKey} {username} />\r\n\t<div class=\"flex-1 bg-neutral-700 text-neutral-200\">\r\n\t\t<Repo let:esModule let:props let:handleChange>\r\n\t\t\t<Mount src={esModule} {props} on:change={handleChange} />\r\n\t\t</Repo>\r\n\t</div>\r\n</div>\r\n"],"file":"_app/immutable/chunks/_page-6eedf73c.js"}