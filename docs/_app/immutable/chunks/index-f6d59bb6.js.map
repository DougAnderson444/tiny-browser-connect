{"version":3,"file":"index-f6d59bb6.js","sources":["../../../../../../node_modules/arweave/web/ar.js","../../../../../../node_modules/arweave/web/lib/api.js","../../../../../../node_modules/arweave/web/lib/utils.js","../../../../../../node_modules/arweave/web/lib/crypto/webcrypto-driver.js","../../../../../../node_modules/arweave/web/network.js","../../../../../../node_modules/arweave/web/lib/error.js","../../../../../../node_modules/arweave/web/lib/deepHash.js","../../../../../../node_modules/arweave/web/lib/merkle.js","../../../../../../node_modules/arweave/web/lib/transaction.js","../../../../../../node_modules/arweave/web/lib/transaction-uploader.js","../../../../../../node_modules/arweave/web/transactions.js","../../../../../../node_modules/arweave/web/wallets.js","../../../../../../node_modules/arweave/web/silo.js","../../../../../../node_modules/arweave/web/chunks.js","../../../../../../node_modules/arweave/web/blocks.js","../../../../../../node_modules/arweave/web/common.js","../../../../../../node_modules/arweave/web/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_js_1 = require(\"bignumber.js\");\nclass Ar {\n    constructor() {\n        // Configure and assign the constructor function for the bignumber library.\n        this.BigNum = (value, decimals) => {\n            let instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimals });\n            return new instance(value);\n        };\n    }\n    winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {\n        let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n        return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n    }\n    arToWinston(arString, { formatted = false } = {}) {\n        let number = this.stringToBigNum(arString).shiftedBy(12);\n        return formatted ? number.toFormat() : number.toFixed(0);\n    }\n    compare(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.comparedTo(b);\n    }\n    isEqual(winstonStringA, winstonStringB) {\n        return this.compare(winstonStringA, winstonStringB) === 0;\n    }\n    isLessThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isLessThan(b);\n    }\n    isGreaterThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isGreaterThan(b);\n    }\n    add(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.plus(winstonStringB).toFixed(0);\n    }\n    sub(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.minus(winstonStringB).toFixed(0);\n    }\n    stringToBigNum(stringValue, decimalPlaces = 12) {\n        return this.BigNum(stringValue, decimalPlaces);\n    }\n}\nexports.default = Ar;\n//# sourceMappingURL=ar.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Api {\n    constructor(config) {\n        this.METHOD_GET = \"GET\";\n        this.METHOD_POST = \"POST\";\n        this.applyConfig(config);\n    }\n    applyConfig(config) {\n        this.config = this.mergeDefaults(config);\n    }\n    getConfig() {\n        return this.config;\n    }\n    mergeDefaults(config) {\n        const protocol = config.protocol || \"http\";\n        const port = config.port || (protocol === \"https\" ? 443 : 80);\n        return {\n            host: config.host || \"127.0.0.1\",\n            protocol,\n            port,\n            timeout: config.timeout || 20000,\n            logging: config.logging || false,\n            logger: config.logger || console.log,\n            network: config.network,\n        };\n    }\n    async get(endpoint, config) {\n        return await this.request(endpoint, Object.assign(Object.assign({}, config), { method: this.METHOD_GET }));\n    }\n    async post(endpoint, body, config) {\n        const headers = new Headers((config === null || config === void 0 ? void 0 : config.headers) || {});\n        headers.append(\"content-type\", \"application/json\");\n        headers.append(\"accept\", \"application/json, text/plain, */*\");\n        return await this.request(endpoint, Object.assign(Object.assign({}, config), { method: this.METHOD_POST, body: JSON.stringify(body), headers }));\n    }\n    async request(endpoint, init) {\n        const headers = new Headers((init === null || init === void 0 ? void 0 : init.headers) || {});\n        const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;\n        if (endpoint.startsWith(\"/\")) {\n            endpoint = endpoint.replace(\"/\", \"\");\n        }\n        if (this.config.network) {\n            headers.append(\"x-network\", this.config.network);\n        }\n        if (this.config.logging) {\n            this.config.logger(`Requesting: ${baseURL}/${endpoint}`);\n        }\n        let res = await fetch(`${baseURL}/${endpoint}`, Object.assign(Object.assign({}, (init || {})), { headers }));\n        if (this.config.logging) {\n            this.config.logger(`Response:   ${res.url} - ${res.status}`);\n        }\n        const contentType = res.headers.get(\"content-type\");\n        const response = res;\n        if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(\"application/json\")) {\n            response.data = (await res.clone().json());\n        }\n        else {\n            try {\n                response.data = (await res.clone().text());\n            }\n            catch (_a) {\n                response.data = (await res.clone().arrayBuffer());\n            }\n        }\n        return response;\n    }\n}\nexports.default = Api;\n//# sourceMappingURL=api.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b64UrlDecode = exports.b64UrlEncode = exports.bufferTob64Url = exports.bufferTob64 = exports.b64UrlToBuffer = exports.stringToB64Url = exports.stringToBuffer = exports.bufferToString = exports.b64UrlToString = exports.concatBuffers = void 0;\nconst B64js = require(\"base64-js\");\nfunction concatBuffers(buffers) {\n    let total_length = 0;\n    for (let i = 0; i < buffers.length; i++) {\n        total_length += buffers[i].byteLength;\n    }\n    let temp = new Uint8Array(total_length);\n    let offset = 0;\n    temp.set(new Uint8Array(buffers[0]), offset);\n    offset += buffers[0].byteLength;\n    for (let i = 1; i < buffers.length; i++) {\n        temp.set(new Uint8Array(buffers[i]), offset);\n        offset += buffers[i].byteLength;\n    }\n    return temp;\n}\nexports.concatBuffers = concatBuffers;\nfunction b64UrlToString(b64UrlString) {\n    let buffer = b64UrlToBuffer(b64UrlString);\n    return bufferToString(buffer);\n}\nexports.b64UrlToString = b64UrlToString;\nfunction bufferToString(buffer) {\n    // TextEncoder will be available in browsers, but not in node\n    if (typeof TextDecoder == \"undefined\") {\n        const TextDecoder = require(\"util\").TextDecoder;\n        return new TextDecoder(\"utf-8\", { fatal: true }).decode(buffer);\n    }\n    return new TextDecoder(\"utf-8\", { fatal: true }).decode(buffer);\n}\nexports.bufferToString = bufferToString;\nfunction stringToBuffer(string) {\n    // TextEncoder will be available in browsers, but not in node\n    if (typeof TextEncoder == \"undefined\") {\n        const TextEncoder = require(\"util\").TextEncoder;\n        return new TextEncoder().encode(string);\n    }\n    return new TextEncoder().encode(string);\n}\nexports.stringToBuffer = stringToBuffer;\nfunction stringToB64Url(string) {\n    return bufferTob64Url(stringToBuffer(string));\n}\nexports.stringToB64Url = stringToB64Url;\nfunction b64UrlToBuffer(b64UrlString) {\n    return new Uint8Array(B64js.toByteArray(b64UrlDecode(b64UrlString)));\n}\nexports.b64UrlToBuffer = b64UrlToBuffer;\nfunction bufferTob64(buffer) {\n    return B64js.fromByteArray(new Uint8Array(buffer));\n}\nexports.bufferTob64 = bufferTob64;\nfunction bufferTob64Url(buffer) {\n    return b64UrlEncode(bufferTob64(buffer));\n}\nexports.bufferTob64Url = bufferTob64Url;\nfunction b64UrlEncode(b64UrlString) {\n    return b64UrlString\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/\\=/g, \"\");\n}\nexports.b64UrlEncode = b64UrlEncode;\nfunction b64UrlDecode(b64UrlString) {\n    b64UrlString = b64UrlString.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n    let padding;\n    b64UrlString.length % 4 == 0\n        ? (padding = 0)\n        : (padding = 4 - (b64UrlString.length % 4));\n    return b64UrlString.concat(\"=\".repeat(padding));\n}\nexports.b64UrlDecode = b64UrlDecode;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ArweaveUtils = require(\"../utils\");\nclass WebCryptoDriver {\n    constructor() {\n        this.keyLength = 4096;\n        this.publicExponent = 0x10001;\n        this.hashAlgorithm = \"sha256\";\n        if (!this.detectWebCrypto()) {\n            throw new Error(\"SubtleCrypto not available!\");\n        }\n        this.driver = crypto.subtle;\n    }\n    async generateJWK() {\n        let cryptoKey = await this.driver.generateKey({\n            name: \"RSA-PSS\",\n            modulusLength: 4096,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: {\n                name: \"SHA-256\",\n            },\n        }, true, [\"sign\"]);\n        let jwk = await this.driver.exportKey(\"jwk\", cryptoKey.privateKey);\n        return {\n            kty: jwk.kty,\n            e: jwk.e,\n            n: jwk.n,\n            d: jwk.d,\n            p: jwk.p,\n            q: jwk.q,\n            dp: jwk.dp,\n            dq: jwk.dq,\n            qi: jwk.qi,\n        };\n    }\n    async sign(jwk, data, { saltLength } = {}) {\n        let signature = await this.driver.sign({\n            name: \"RSA-PSS\",\n            saltLength: 32,\n        }, await this.jwkToCryptoKey(jwk), data);\n        return new Uint8Array(signature);\n    }\n    async hash(data, algorithm = \"SHA-256\") {\n        let digest = await this.driver.digest(algorithm, data);\n        return new Uint8Array(digest);\n    }\n    async verify(publicModulus, data, signature) {\n        const publicKey = {\n            kty: \"RSA\",\n            e: \"AQAB\",\n            n: publicModulus,\n        };\n        const key = await this.jwkToPublicCryptoKey(publicKey);\n        const digest = await this.driver.digest(\"SHA-256\", data);\n        const salt0 = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: 0,\n        }, key, signature, data);\n        const salt32 = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: 32,\n        }, key, signature, data);\n        // saltN's salt-length is derived from a formula described here\n        // https://developer.mozilla.org/en-US/docs/Web/API/RsaPssParams\n        const saltN = await this.driver.verify({\n            name: \"RSA-PSS\",\n            saltLength: Math.ceil((key.algorithm.modulusLength - 1) / 8) -\n                digest.byteLength -\n                2,\n        }, key, signature, data);\n        return salt0 || salt32 || saltN;\n    }\n    async jwkToCryptoKey(jwk) {\n        return this.driver.importKey(\"jwk\", jwk, {\n            name: \"RSA-PSS\",\n            hash: {\n                name: \"SHA-256\",\n            },\n        }, false, [\"sign\"]);\n    }\n    async jwkToPublicCryptoKey(publicJwk) {\n        return this.driver.importKey(\"jwk\", publicJwk, {\n            name: \"RSA-PSS\",\n            hash: {\n                name: \"SHA-256\",\n            },\n        }, false, [\"verify\"]);\n    }\n    detectWebCrypto() {\n        if (typeof crypto === \"undefined\") {\n            return false;\n        }\n        const subtle = crypto === null || crypto === void 0 ? void 0 : crypto.subtle;\n        if (subtle === undefined) {\n            return false;\n        }\n        const names = [\n            \"generateKey\",\n            \"importKey\",\n            \"exportKey\",\n            \"digest\",\n            \"sign\",\n        ];\n        return names.every((name) => typeof subtle[name] === \"function\");\n    }\n    async encrypt(data, key, salt) {\n        const initialKey = await this.driver.importKey(\"raw\", typeof key == \"string\" ? ArweaveUtils.stringToBuffer(key) : key, {\n            name: \"PBKDF2\",\n            length: 32,\n        }, false, [\"deriveKey\"]);\n        // const salt = ArweaveUtils.stringToBuffer(\"salt\");\n        // create a random string for deriving the key\n        // const salt = this.driver.randomBytes(16).toString('hex');\n        const derivedkey = await this.driver.deriveKey({\n            name: \"PBKDF2\",\n            salt: salt\n                ? ArweaveUtils.stringToBuffer(salt)\n                : ArweaveUtils.stringToBuffer(\"salt\"),\n            iterations: 100000,\n            hash: \"SHA-256\",\n        }, initialKey, {\n            name: \"AES-CBC\",\n            length: 256,\n        }, false, [\"encrypt\", \"decrypt\"]);\n        const iv = new Uint8Array(16);\n        crypto.getRandomValues(iv);\n        const encryptedData = await this.driver.encrypt({\n            name: \"AES-CBC\",\n            iv: iv,\n        }, derivedkey, data);\n        return ArweaveUtils.concatBuffers([iv, encryptedData]);\n    }\n    async decrypt(encrypted, key, salt) {\n        const initialKey = await this.driver.importKey(\"raw\", typeof key == \"string\" ? ArweaveUtils.stringToBuffer(key) : key, {\n            name: \"PBKDF2\",\n            length: 32,\n        }, false, [\"deriveKey\"]);\n        // const salt = ArweaveUtils.stringToBuffer(\"pepper\");\n        const derivedkey = await this.driver.deriveKey({\n            name: \"PBKDF2\",\n            salt: salt\n                ? ArweaveUtils.stringToBuffer(salt)\n                : ArweaveUtils.stringToBuffer(\"salt\"),\n            iterations: 100000,\n            hash: \"SHA-256\",\n        }, initialKey, {\n            name: \"AES-CBC\",\n            length: 256,\n        }, false, [\"encrypt\", \"decrypt\"]);\n        const iv = encrypted.slice(0, 16);\n        const data = await this.driver.decrypt({\n            name: \"AES-CBC\",\n            iv: iv,\n        }, derivedkey, encrypted.slice(16));\n        // We're just using concat to convert from an array buffer to uint8array\n        return ArweaveUtils.concatBuffers([data]);\n    }\n}\nexports.default = WebCryptoDriver;\n//# sourceMappingURL=webcrypto-driver.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Network {\n    constructor(api) {\n        this.api = api;\n    }\n    getInfo() {\n        return this.api.get(`info`).then((response) => {\n            return response.data;\n        });\n    }\n    getPeers() {\n        return this.api.get(`peers`).then((response) => {\n            return response.data;\n        });\n    }\n}\nexports.default = Network;\n//# sourceMappingURL=network.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getError = void 0;\nclass ArweaveError extends Error {\n    constructor(type, optional = {}) {\n        if (optional.message) {\n            super(optional.message);\n        }\n        else {\n            super();\n        }\n        this.type = type;\n        this.response = optional.response;\n    }\n    getType() {\n        return this.type;\n    }\n}\nexports.default = ArweaveError;\n// Safely get error string\n// from a response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\nfunction getError(resp) {\n    let data = resp.data;\n    if (typeof resp.data === \"string\") {\n        try {\n            data = JSON.parse(resp.data);\n        }\n        catch (e) { }\n    }\n    if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n        try {\n            data = JSON.parse(data.toString());\n        }\n        catch (e) { }\n    }\n    return data ? data.error || data : resp.statusText || \"unknown\";\n}\nexports.getError = getError;\n//# sourceMappingURL=error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"../common\");\nasync function deepHash(data) {\n    if (Array.isArray(data)) {\n        const tag = common_1.default.utils.concatBuffers([\n            common_1.default.utils.stringToBuffer(\"list\"),\n            common_1.default.utils.stringToBuffer(data.length.toString()),\n        ]);\n        return await deepHashChunks(data, await common_1.default.crypto.hash(tag, \"SHA-384\"));\n    }\n    const tag = common_1.default.utils.concatBuffers([\n        common_1.default.utils.stringToBuffer(\"blob\"),\n        common_1.default.utils.stringToBuffer(data.byteLength.toString()),\n    ]);\n    const taggedHash = common_1.default.utils.concatBuffers([\n        await common_1.default.crypto.hash(tag, \"SHA-384\"),\n        await common_1.default.crypto.hash(data, \"SHA-384\"),\n    ]);\n    return await common_1.default.crypto.hash(taggedHash, \"SHA-384\");\n}\nexports.default = deepHash;\nasync function deepHashChunks(chunks, acc) {\n    if (chunks.length < 1) {\n        return acc;\n    }\n    const hashPair = common_1.default.utils.concatBuffers([\n        acc,\n        await deepHash(chunks[0]),\n    ]);\n    const newAcc = await common_1.default.crypto.hash(hashPair, \"SHA-384\");\n    return await deepHashChunks(chunks.slice(1), newAcc);\n}\n//# sourceMappingURL=deepHash.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debug = exports.validatePath = exports.arrayCompare = exports.bufferToInt = exports.intToBuffer = exports.arrayFlatten = exports.generateProofs = exports.buildLayers = exports.generateTransactionChunks = exports.generateTree = exports.computeRootHash = exports.generateLeaves = exports.chunkData = exports.MIN_CHUNK_SIZE = exports.MAX_CHUNK_SIZE = void 0;\n/**\n * @see {@link https://github.com/ArweaveTeam/arweave/blob/fbc381e0e36efffa45d13f2faa6199d3766edaa2/apps/arweave/src/ar_merkle.erl}\n */\nconst common_1 = require(\"../common\");\nconst utils_1 = require(\"./utils\");\nexports.MAX_CHUNK_SIZE = 256 * 1024;\nexports.MIN_CHUNK_SIZE = 32 * 1024;\nconst NOTE_SIZE = 32;\nconst HASH_SIZE = 32;\n/**\n * Takes the input data and chunks it into (mostly) equal sized chunks.\n * The last chunk will be a bit smaller as it contains the remainder\n * from the chunking process.\n */\nasync function chunkData(data) {\n    let chunks = [];\n    let rest = data;\n    let cursor = 0;\n    while (rest.byteLength >= exports.MAX_CHUNK_SIZE) {\n        let chunkSize = exports.MAX_CHUNK_SIZE;\n        // If the total bytes left will produce a chunk < MIN_CHUNK_SIZE,\n        // then adjust the amount we put in this 2nd last chunk.\n        let nextChunkSize = rest.byteLength - exports.MAX_CHUNK_SIZE;\n        if (nextChunkSize > 0 && nextChunkSize < exports.MIN_CHUNK_SIZE) {\n            chunkSize = Math.ceil(rest.byteLength / 2);\n            // console.log(`Last chunk will be: ${nextChunkSize} which is below ${MIN_CHUNK_SIZE}, adjusting current to ${chunkSize} with ${rest.byteLength} left.`)\n        }\n        const chunk = rest.slice(0, chunkSize);\n        const dataHash = await common_1.default.crypto.hash(chunk);\n        cursor += chunk.byteLength;\n        chunks.push({\n            dataHash,\n            minByteRange: cursor - chunk.byteLength,\n            maxByteRange: cursor,\n        });\n        rest = rest.slice(chunkSize);\n    }\n    chunks.push({\n        dataHash: await common_1.default.crypto.hash(rest),\n        minByteRange: cursor,\n        maxByteRange: cursor + rest.byteLength,\n    });\n    return chunks;\n}\nexports.chunkData = chunkData;\nasync function generateLeaves(chunks) {\n    return Promise.all(chunks.map(async ({ dataHash, minByteRange, maxByteRange }) => {\n        return {\n            type: \"leaf\",\n            id: await hash(await Promise.all([hash(dataHash), hash(intToBuffer(maxByteRange))])),\n            dataHash: dataHash,\n            minByteRange,\n            maxByteRange,\n        };\n    }));\n}\nexports.generateLeaves = generateLeaves;\n/**\n * Builds an arweave merkle tree and gets the root hash for the given input.\n */\nasync function computeRootHash(data) {\n    const rootNode = await generateTree(data);\n    return rootNode.id;\n}\nexports.computeRootHash = computeRootHash;\nasync function generateTree(data) {\n    const rootNode = await buildLayers(await generateLeaves(await chunkData(data)));\n    return rootNode;\n}\nexports.generateTree = generateTree;\n/**\n * Generates the data_root, chunks & proofs\n * needed for a transaction.\n *\n * This also checks if the last chunk is a zero-length\n * chunk and discards that chunk and proof if so.\n * (we do not need to upload this zero length chunk)\n *\n * @param data\n */\nasync function generateTransactionChunks(data) {\n    const chunks = await chunkData(data);\n    const leaves = await generateLeaves(chunks);\n    const root = await buildLayers(leaves);\n    const proofs = await generateProofs(root);\n    // Discard the last chunk & proof if it's zero length.\n    const lastChunk = chunks.slice(-1)[0];\n    if (lastChunk.maxByteRange - lastChunk.minByteRange === 0) {\n        chunks.splice(chunks.length - 1, 1);\n        proofs.splice(proofs.length - 1, 1);\n    }\n    return {\n        data_root: root.id,\n        chunks,\n        proofs,\n    };\n}\nexports.generateTransactionChunks = generateTransactionChunks;\n/**\n * Starting with the bottom layer of leaf nodes, hash every second pair\n * into a new branch node, push those branch nodes onto a new layer,\n * and then recurse, building up the tree to it's root, where the\n * layer only consists of two items.\n */\nasync function buildLayers(nodes, level = 0) {\n    // If there is only 1 node left, this is going to be the root node\n    if (nodes.length < 2) {\n        const root = nodes[0];\n        // console.log(\"Root layer\", root);\n        return root;\n    }\n    const nextLayer = [];\n    for (let i = 0; i < nodes.length; i += 2) {\n        nextLayer.push(await hashBranch(nodes[i], nodes[i + 1]));\n    }\n    // console.log(\"Layer\", nextLayer);\n    return buildLayers(nextLayer, level + 1);\n}\nexports.buildLayers = buildLayers;\n/**\n * Recursively search through all branches of the tree,\n * and generate a proof for each leaf node.\n */\nfunction generateProofs(root) {\n    const proofs = resolveBranchProofs(root);\n    if (!Array.isArray(proofs)) {\n        return [proofs];\n    }\n    return arrayFlatten(proofs);\n}\nexports.generateProofs = generateProofs;\nfunction resolveBranchProofs(node, proof = new Uint8Array(), depth = 0) {\n    if (node.type == \"leaf\") {\n        return {\n            offset: node.maxByteRange - 1,\n            proof: (0, utils_1.concatBuffers)([\n                proof,\n                node.dataHash,\n                intToBuffer(node.maxByteRange),\n            ]),\n        };\n    }\n    if (node.type == \"branch\") {\n        const partialProof = (0, utils_1.concatBuffers)([\n            proof,\n            node.leftChild.id,\n            node.rightChild.id,\n            intToBuffer(node.byteRange),\n        ]);\n        return [\n            resolveBranchProofs(node.leftChild, partialProof, depth + 1),\n            resolveBranchProofs(node.rightChild, partialProof, depth + 1),\n        ];\n    }\n    throw new Error(`Unexpected node type`);\n}\nfunction arrayFlatten(input) {\n    const flat = [];\n    input.forEach((item) => {\n        if (Array.isArray(item)) {\n            flat.push(...arrayFlatten(item));\n        }\n        else {\n            flat.push(item);\n        }\n    });\n    return flat;\n}\nexports.arrayFlatten = arrayFlatten;\nasync function hashBranch(left, right) {\n    if (!right) {\n        return left;\n    }\n    let branch = {\n        type: \"branch\",\n        id: await hash([\n            await hash(left.id),\n            await hash(right.id),\n            await hash(intToBuffer(left.maxByteRange)),\n        ]),\n        byteRange: left.maxByteRange,\n        maxByteRange: right.maxByteRange,\n        leftChild: left,\n        rightChild: right,\n    };\n    return branch;\n}\nasync function hash(data) {\n    if (Array.isArray(data)) {\n        data = common_1.default.utils.concatBuffers(data);\n    }\n    return new Uint8Array(await common_1.default.crypto.hash(data));\n}\nfunction intToBuffer(note) {\n    const buffer = new Uint8Array(NOTE_SIZE);\n    for (var i = buffer.length - 1; i >= 0; i--) {\n        var byte = note % 256;\n        buffer[i] = byte;\n        note = (note - byte) / 256;\n    }\n    return buffer;\n}\nexports.intToBuffer = intToBuffer;\nfunction bufferToInt(buffer) {\n    let value = 0;\n    for (var i = 0; i < buffer.length; i++) {\n        value *= 256;\n        value += buffer[i];\n    }\n    return value;\n}\nexports.bufferToInt = bufferToInt;\nconst arrayCompare = (a, b) => a.every((value, index) => b[index] === value);\nexports.arrayCompare = arrayCompare;\nasync function validatePath(id, dest, leftBound, rightBound, path) {\n    if (rightBound <= 0) {\n        return false;\n    }\n    if (dest >= rightBound) {\n        return validatePath(id, 0, rightBound - 1, rightBound, path);\n    }\n    if (dest < 0) {\n        return validatePath(id, 0, 0, rightBound, path);\n    }\n    if (path.length == HASH_SIZE + NOTE_SIZE) {\n        const pathData = path.slice(0, HASH_SIZE);\n        const endOffsetBuffer = path.slice(pathData.length, pathData.length + NOTE_SIZE);\n        const pathDataHash = await hash([\n            await hash(pathData),\n            await hash(endOffsetBuffer),\n        ]);\n        let result = (0, exports.arrayCompare)(id, pathDataHash);\n        if (result) {\n            return {\n                offset: rightBound - 1,\n                leftBound: leftBound,\n                rightBound: rightBound,\n                chunkSize: rightBound - leftBound,\n            };\n        }\n        return false;\n    }\n    const left = path.slice(0, HASH_SIZE);\n    const right = path.slice(left.length, left.length + HASH_SIZE);\n    const offsetBuffer = path.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);\n    const offset = bufferToInt(offsetBuffer);\n    const remainder = path.slice(left.length + right.length + offsetBuffer.length);\n    const pathHash = await hash([\n        await hash(left),\n        await hash(right),\n        await hash(offsetBuffer),\n    ]);\n    if ((0, exports.arrayCompare)(id, pathHash)) {\n        if (dest < offset) {\n            return await validatePath(left, dest, leftBound, Math.min(rightBound, offset), remainder);\n        }\n        return await validatePath(right, dest, Math.max(leftBound, offset), rightBound, remainder);\n    }\n    return false;\n}\nexports.validatePath = validatePath;\n/**\n * Inspect an arweave chunk proof.\n * Takes proof, parses, reads and displays the values for console logging.\n * One proof section per line\n * Format: left,right,offset => hash\n */\nasync function debug(proof, output = \"\") {\n    if (proof.byteLength < 1) {\n        return output;\n    }\n    const left = proof.slice(0, HASH_SIZE);\n    const right = proof.slice(left.length, left.length + HASH_SIZE);\n    const offsetBuffer = proof.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);\n    const offset = bufferToInt(offsetBuffer);\n    const remainder = proof.slice(left.length + right.length + offsetBuffer.length);\n    const pathHash = await hash([\n        await hash(left),\n        await hash(right),\n        await hash(offsetBuffer),\n    ]);\n    const updatedOutput = `${output}\\n${JSON.stringify(Buffer.from(left))},${JSON.stringify(Buffer.from(right))},${offset} => ${JSON.stringify(pathHash)}`;\n    return debug(remainder, updatedOutput);\n}\nexports.debug = debug;\n//# sourceMappingURL=merkle.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tag = void 0;\nconst ArweaveUtils = require(\"./utils\");\nconst deepHash_1 = require(\"./deepHash\");\nconst merkle_1 = require(\"./merkle\");\nclass BaseObject {\n    get(field, options) {\n        if (!Object.getOwnPropertyNames(this).includes(field)) {\n            throw new Error(`Field \"${field}\" is not a property of the Arweave Transaction class.`);\n        }\n        // Handle fields that are Uint8Arrays.\n        // To maintain compat we encode them to b64url\n        // if decode option is not specificed.\n        if (this[field] instanceof Uint8Array) {\n            if (options && options.decode && options.string) {\n                return ArweaveUtils.bufferToString(this[field]);\n            }\n            if (options && options.decode && !options.string) {\n                return this[field];\n            }\n            return ArweaveUtils.bufferTob64Url(this[field]);\n        }\n        if (options && options.decode == true) {\n            if (options && options.string) {\n                return ArweaveUtils.b64UrlToString(this[field]);\n            }\n            return ArweaveUtils.b64UrlToBuffer(this[field]);\n        }\n        return this[field];\n    }\n}\nclass Tag extends BaseObject {\n    constructor(name, value, decode = false) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n}\nexports.Tag = Tag;\nclass Transaction extends BaseObject {\n    constructor(attributes = {}) {\n        super();\n        this.format = 2;\n        this.id = \"\";\n        this.last_tx = \"\";\n        this.owner = \"\";\n        this.tags = [];\n        this.target = \"\";\n        this.quantity = \"0\";\n        this.data_size = \"0\";\n        this.data = new Uint8Array();\n        this.data_root = \"\";\n        this.reward = \"0\";\n        this.signature = \"\";\n        Object.assign(this, attributes);\n        // If something passes in a Tx that has been toJSON'ed and back,\n        // or where the data was filled in from /tx/data endpoint.\n        // data will be b64url encoded, so decode it.\n        if (typeof this.data === \"string\") {\n            this.data = ArweaveUtils.b64UrlToBuffer(this.data);\n        }\n        if (attributes.tags) {\n            this.tags = attributes.tags.map((tag) => {\n                return new Tag(tag.name, tag.value);\n            });\n        }\n    }\n    addTag(name, value) {\n        this.tags.push(new Tag(ArweaveUtils.stringToB64Url(name), ArweaveUtils.stringToB64Url(value)));\n    }\n    toJSON() {\n        return {\n            format: this.format,\n            id: this.id,\n            last_tx: this.last_tx,\n            owner: this.owner,\n            tags: this.tags,\n            target: this.target,\n            quantity: this.quantity,\n            data: ArweaveUtils.bufferTob64Url(this.data),\n            data_size: this.data_size,\n            data_root: this.data_root,\n            data_tree: this.data_tree,\n            reward: this.reward,\n            signature: this.signature,\n        };\n    }\n    setOwner(owner) {\n        this.owner = owner;\n    }\n    setSignature({ id, owner, reward, tags, signature, }) {\n        this.id = id;\n        this.owner = owner;\n        if (reward)\n            this.reward = reward;\n        if (tags)\n            this.tags = tags;\n        this.signature = signature;\n    }\n    async prepareChunks(data) {\n        // Note: we *do not* use `this.data`, the caller may be\n        // operating on a transaction with an zero length data field.\n        // This function computes the chunks for the data passed in and\n        // assigns the result to this transaction. It should not read the\n        // data *from* this transaction.\n        if (!this.chunks && data.byteLength > 0) {\n            this.chunks = await (0, merkle_1.generateTransactionChunks)(data);\n            this.data_root = ArweaveUtils.bufferTob64Url(this.chunks.data_root);\n        }\n        if (!this.chunks && data.byteLength === 0) {\n            this.chunks = {\n                chunks: [],\n                data_root: new Uint8Array(),\n                proofs: [],\n            };\n            this.data_root = \"\";\n        }\n    }\n    // Returns a chunk in a format suitable for posting to /chunk.\n    // Similar to `prepareChunks()` this does not operate `this.data`,\n    // instead using the data passed in.\n    getChunk(idx, data) {\n        if (!this.chunks) {\n            throw new Error(`Chunks have not been prepared`);\n        }\n        const proof = this.chunks.proofs[idx];\n        const chunk = this.chunks.chunks[idx];\n        return {\n            data_root: this.data_root,\n            data_size: this.data_size,\n            data_path: ArweaveUtils.bufferTob64Url(proof.proof),\n            offset: proof.offset.toString(),\n            chunk: ArweaveUtils.bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange)),\n        };\n    }\n    async getSignatureData() {\n        switch (this.format) {\n            case 1:\n                let tags = this.tags.reduce((accumulator, tag) => {\n                    return ArweaveUtils.concatBuffers([\n                        accumulator,\n                        tag.get(\"name\", { decode: true, string: false }),\n                        tag.get(\"value\", { decode: true, string: false }),\n                    ]);\n                }, new Uint8Array());\n                return ArweaveUtils.concatBuffers([\n                    this.get(\"owner\", { decode: true, string: false }),\n                    this.get(\"target\", { decode: true, string: false }),\n                    this.get(\"data\", { decode: true, string: false }),\n                    ArweaveUtils.stringToBuffer(this.quantity),\n                    ArweaveUtils.stringToBuffer(this.reward),\n                    this.get(\"last_tx\", { decode: true, string: false }),\n                    tags,\n                ]);\n            case 2:\n                if (!this.data_root) {\n                    await this.prepareChunks(this.data);\n                }\n                const tagList = this.tags.map((tag) => [\n                    tag.get(\"name\", { decode: true, string: false }),\n                    tag.get(\"value\", { decode: true, string: false }),\n                ]);\n                return await (0, deepHash_1.default)([\n                    ArweaveUtils.stringToBuffer(this.format.toString()),\n                    this.get(\"owner\", { decode: true, string: false }),\n                    this.get(\"target\", { decode: true, string: false }),\n                    ArweaveUtils.stringToBuffer(this.quantity),\n                    ArweaveUtils.stringToBuffer(this.reward),\n                    this.get(\"last_tx\", { decode: true, string: false }),\n                    tagList,\n                    ArweaveUtils.stringToBuffer(this.data_size),\n                    this.get(\"data_root\", { decode: true, string: false }),\n                ]);\n            default:\n                throw new Error(`Unexpected transaction format: ${this.format}`);\n        }\n    }\n}\nexports.default = Transaction;\n//# sourceMappingURL=transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionUploader = void 0;\nconst transaction_1 = require(\"./transaction\");\nconst ArweaveUtils = require(\"./utils\");\nconst error_1 = require(\"./error\");\nconst merkle_1 = require(\"./merkle\");\n// Maximum amount of chunks we will upload in the body.\nconst MAX_CHUNKS_IN_BODY = 1;\n// We assume these errors are intermitment and we can try again after a delay:\n// - not_joined\n// - timeout\n// - data_root_not_found (we may have hit a node that just hasn't seen it yet)\n// - exceeds_disk_pool_size_limit\n// We also try again after any kind of unexpected network errors\n// Errors from /chunk we should never try and continue on.\nconst FATAL_CHUNK_UPLOAD_ERRORS = [\n    \"invalid_json\",\n    \"chunk_too_big\",\n    \"data_path_too_big\",\n    \"offset_too_big\",\n    \"data_size_too_big\",\n    \"chunk_proof_ratio_not_attractive\",\n    \"invalid_proof\",\n];\n// Amount we will delay on receiving an error response but do want to continue.\nconst ERROR_DELAY = 1000 * 40;\nclass TransactionUploader {\n    get isComplete() {\n        return (this.txPosted &&\n            this.chunkIndex === this.transaction.chunks.chunks.length);\n    }\n    get totalChunks() {\n        return this.transaction.chunks.chunks.length;\n    }\n    get uploadedChunks() {\n        return this.chunkIndex;\n    }\n    get pctComplete() {\n        return Math.trunc((this.uploadedChunks / this.totalChunks) * 100);\n    }\n    constructor(api, transaction) {\n        this.api = api;\n        this.chunkIndex = 0;\n        this.txPosted = false;\n        this.lastRequestTimeEnd = 0;\n        this.totalErrors = 0; // Not serialized.\n        this.lastResponseStatus = 0;\n        this.lastResponseError = \"\";\n        if (!transaction.id) {\n            throw new Error(`Transaction is not signed`);\n        }\n        if (!transaction.chunks) {\n            throw new Error(`Transaction chunks not prepared`);\n        }\n        // Make a copy of transaction, zeroing the data so we can serialize.\n        this.data = transaction.data;\n        this.transaction = new transaction_1.default(Object.assign({}, transaction, { data: new Uint8Array(0) }));\n    }\n    /**\n     * Uploads the next part of the transaction.\n     * On the first call this posts the transaction\n     * itself and on any subsequent calls uploads the\n     * next chunk until it completes.\n     */\n    async uploadChunk(chunkIndex_) {\n        if (this.isComplete) {\n            throw new Error(`Upload is already complete`);\n        }\n        if (this.lastResponseError !== \"\") {\n            this.totalErrors++;\n        }\n        else {\n            this.totalErrors = 0;\n        }\n        // We have been trying for about an hour receiving an\n        // error every time, so eventually bail.\n        if (this.totalErrors === 100) {\n            throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);\n        }\n        let delay = this.lastResponseError === \"\"\n            ? 0\n            : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);\n        if (delay > 0) {\n            // Jitter delay bcoz networks, subtract up to 30% from 40 seconds\n            delay = delay - delay * Math.random() * 0.3;\n            await new Promise((res) => setTimeout(res, delay));\n        }\n        this.lastResponseError = \"\";\n        if (!this.txPosted) {\n            await this.postTransaction();\n            return;\n        }\n        if (chunkIndex_) {\n            this.chunkIndex = chunkIndex_;\n        }\n        const chunk = this.transaction.getChunk(chunkIndex_ || this.chunkIndex, this.data);\n        const chunkOk = await (0, merkle_1.validatePath)(this.transaction.chunks.data_root, parseInt(chunk.offset), 0, parseInt(chunk.data_size), ArweaveUtils.b64UrlToBuffer(chunk.data_path));\n        if (!chunkOk) {\n            throw new Error(`Unable to validate chunk ${this.chunkIndex}`);\n        }\n        // Catch network errors and turn them into objects with status -1 and an error message.\n        const resp = await this.api\n            .post(`chunk`, this.transaction.getChunk(this.chunkIndex, this.data))\n            .catch((e) => {\n            console.error(e.message);\n            return { status: -1, data: { error: e.message } };\n        });\n        this.lastRequestTimeEnd = Date.now();\n        this.lastResponseStatus = resp.status;\n        if (this.lastResponseStatus == 200) {\n            this.chunkIndex++;\n        }\n        else {\n            this.lastResponseError = (0, error_1.getError)(resp);\n            if (FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError)) {\n                throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);\n            }\n        }\n    }\n    /**\n     * Reconstructs an upload from its serialized state and data.\n     * Checks if data matches the expected data_root.\n     *\n     * @param serialized\n     * @param data\n     */\n    static async fromSerialized(api, serialized, data) {\n        if (!serialized ||\n            typeof serialized.chunkIndex !== \"number\" ||\n            typeof serialized.transaction !== \"object\") {\n            throw new Error(`Serialized object does not match expected format.`);\n        }\n        // Everything looks ok, reconstruct the TransactionUpload,\n        // prepare the chunks again and verify the data_root matches\n        var transaction = new transaction_1.default(serialized.transaction);\n        if (!transaction.chunks) {\n            await transaction.prepareChunks(data);\n        }\n        const upload = new TransactionUploader(api, transaction);\n        // Copy the serialized upload information, and data passed in.\n        upload.chunkIndex = serialized.chunkIndex;\n        upload.lastRequestTimeEnd = serialized.lastRequestTimeEnd;\n        upload.lastResponseError = serialized.lastResponseError;\n        upload.lastResponseStatus = serialized.lastResponseStatus;\n        upload.txPosted = serialized.txPosted;\n        upload.data = data;\n        if (upload.transaction.data_root !== serialized.transaction.data_root) {\n            throw new Error(`Data mismatch: Uploader doesn't match provided data.`);\n        }\n        return upload;\n    }\n    /**\n     * Reconstruct an upload from the tx metadata, ie /tx/<id>.\n     *\n     * @param api\n     * @param id\n     * @param data\n     */\n    static async fromTransactionId(api, id) {\n        const resp = await api.get(`tx/${id}`);\n        if (resp.status !== 200) {\n            throw new Error(`Tx ${id} not found: ${resp.status}`);\n        }\n        const transaction = resp.data;\n        transaction.data = new Uint8Array(0);\n        const serialized = {\n            txPosted: true,\n            chunkIndex: 0,\n            lastResponseError: \"\",\n            lastRequestTimeEnd: 0,\n            lastResponseStatus: 0,\n            transaction,\n        };\n        return serialized;\n    }\n    toJSON() {\n        return {\n            chunkIndex: this.chunkIndex,\n            transaction: this.transaction,\n            lastRequestTimeEnd: this.lastRequestTimeEnd,\n            lastResponseStatus: this.lastResponseStatus,\n            lastResponseError: this.lastResponseError,\n            txPosted: this.txPosted,\n        };\n    }\n    // POST to /tx\n    async postTransaction() {\n        const uploadInBody = this.totalChunks <= MAX_CHUNKS_IN_BODY;\n        if (uploadInBody) {\n            // Post the transaction with data.\n            this.transaction.data = this.data;\n            const resp = await this.api.post(`tx`, this.transaction).catch((e) => {\n                console.error(e);\n                return { status: -1, data: { error: e.message } };\n            });\n            this.lastRequestTimeEnd = Date.now();\n            this.lastResponseStatus = resp.status;\n            this.transaction.data = new Uint8Array(0);\n            if (resp.status >= 200 && resp.status < 300) {\n                // We are complete.\n                this.txPosted = true;\n                this.chunkIndex = MAX_CHUNKS_IN_BODY;\n                return;\n            }\n            this.lastResponseError = (0, error_1.getError)(resp);\n            throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);\n        }\n        // Post the transaction with no data.\n        const resp = await this.api.post(`tx`, this.transaction);\n        this.lastRequestTimeEnd = Date.now();\n        this.lastResponseStatus = resp.status;\n        if (!(resp.status >= 200 && resp.status < 300)) {\n            this.lastResponseError = (0, error_1.getError)(resp);\n            throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);\n        }\n        this.txPosted = true;\n    }\n}\nexports.TransactionUploader = TransactionUploader;\n//# sourceMappingURL=transaction-uploader.js.map","\"use strict\";\n/// <reference path=\"../modules.d.ts\" />\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst error_1 = require(\"./lib/error\");\nconst transaction_1 = require(\"./lib/transaction\");\nconst ArweaveUtils = require(\"./lib/utils\");\nconst transaction_uploader_1 = require(\"./lib/transaction-uploader\");\nrequire(\"arconnect\");\nclass Transactions {\n    constructor(api, crypto, chunks) {\n        this.api = api;\n        this.crypto = crypto;\n        this.chunks = chunks;\n    }\n    getTransactionAnchor() {\n        /**\n         * Maintain compatibility with erdjs which sets a global axios.defaults.transformResponse\n         * in order to overcome some other issue in:  https://github.com/axios/axios/issues/983\n         *\n         * However, this introduces a problem with ardrive-js, so we will enforce\n         * config =  {transformResponse: []} where we do not require a transform\n         */\n        return this.api.get(`tx_anchor`).then((response) => {\n            return response.data;\n        });\n    }\n    getPrice(byteSize, targetAddress) {\n        let endpoint = targetAddress\n            ? `price/${byteSize}/${targetAddress}`\n            : `price/${byteSize}`;\n        return this.api.get(endpoint).then((response) => {\n            return response.data;\n        });\n    }\n    async get(id) {\n        const response = await this.api.get(`tx/${id}`);\n        if (response.status == 200) {\n            const data_size = parseInt(response.data.data_size);\n            if (response.data.format >= 2 &&\n                data_size > 0 &&\n                data_size <= 1024 * 1024 * 12) {\n                const data = await this.getData(id);\n                return new transaction_1.default(Object.assign(Object.assign({}, response.data), { data }));\n            }\n            return new transaction_1.default(Object.assign(Object.assign({}, response.data), { format: response.data.format || 1 }));\n        }\n        if (response.status == 404) {\n            throw new error_1.default(\"TX_NOT_FOUND\" /* ArweaveErrorType.TX_NOT_FOUND */);\n        }\n        if (response.status == 410) {\n            throw new error_1.default(\"TX_FAILED\" /* ArweaveErrorType.TX_FAILED */);\n        }\n        throw new error_1.default(\"TX_INVALID\" /* ArweaveErrorType.TX_INVALID */);\n    }\n    fromRaw(attributes) {\n        return new transaction_1.default(attributes);\n    }\n    async search(tagName, tagValue) {\n        return this.api\n            .post(`arql`, {\n            op: \"equals\",\n            expr1: tagName,\n            expr2: tagValue,\n        })\n            .then((response) => {\n            if (!response.data) {\n                return [];\n            }\n            return response.data;\n        });\n    }\n    getStatus(id) {\n        return this.api.get(`tx/${id}/status`).then((response) => {\n            if (response.status == 200) {\n                return {\n                    status: 200,\n                    confirmed: response.data,\n                };\n            }\n            return {\n                status: response.status,\n                confirmed: null,\n            };\n        });\n    }\n    async getData(id, options) {\n        let data = undefined;\n        try {\n            data = await this.chunks.downloadChunkedData(id);\n        }\n        catch (error) {\n            console.error(`Error while trying to download chunked data for ${id}`);\n            console.error(error);\n        }\n        if (!data) {\n            console.warn(`Falling back to gateway cache for ${id}`);\n            try {\n                data = (await this.api.get(`/${id}`)).data;\n            }\n            catch (error) {\n                console.error(`Error while trying to download contiguous data from gateway cache for ${id}`);\n                console.error(error);\n            }\n        }\n        if (!data) {\n            throw new Error(`${id} was not found!`);\n        }\n        if (options && options.decode && !options.string) {\n            return data;\n        }\n        if (options && options.decode && options.string) {\n            return ArweaveUtils.bufferToString(data);\n        }\n        // Since decode wasn't requested, caller expects b64url encoded data.\n        return ArweaveUtils.bufferTob64Url(data);\n    }\n    async sign(transaction, jwk, options) {\n        if (!jwk && typeof arweaveWallet !== \"object\") {\n            throw new Error(`A new Arweave transaction must provide the jwk parameter.`);\n        }\n        else if (!jwk || jwk === \"use_wallet\") {\n            try {\n                const existingPermissions = await arweaveWallet.getPermissions();\n                if (!existingPermissions.includes(\"SIGN_TRANSACTION\"))\n                    await arweaveWallet.connect([\"SIGN_TRANSACTION\"]);\n            }\n            catch (_a) {\n                // Permission is already granted\n            }\n            const signedTransaction = await arweaveWallet.sign(transaction, options);\n            transaction.setSignature({\n                id: signedTransaction.id,\n                owner: signedTransaction.owner,\n                reward: signedTransaction.reward,\n                tags: signedTransaction.tags,\n                signature: signedTransaction.signature,\n            });\n        }\n        else {\n            transaction.setOwner(jwk.n);\n            let dataToSign = await transaction.getSignatureData();\n            let rawSignature = await this.crypto.sign(jwk, dataToSign, options);\n            let id = await this.crypto.hash(rawSignature);\n            transaction.setSignature({\n                id: ArweaveUtils.bufferTob64Url(id),\n                owner: jwk.n,\n                signature: ArweaveUtils.bufferTob64Url(rawSignature),\n            });\n        }\n    }\n    async verify(transaction) {\n        const signaturePayload = await transaction.getSignatureData();\n        /**\n         * The transaction ID should be a SHA-256 hash of the raw signature bytes, so this needs\n         * to be recalculated from the signature and checked against the transaction ID.\n         */\n        const rawSignature = transaction.get(\"signature\", {\n            decode: true,\n            string: false,\n        });\n        const expectedId = ArweaveUtils.bufferTob64Url(await this.crypto.hash(rawSignature));\n        if (transaction.id !== expectedId) {\n            throw new Error(`Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.`);\n        }\n        /**\n         * Now verify the signature is valid and signed by the owner wallet (owner field = originating wallet public key).\n         */\n        return this.crypto.verify(transaction.owner, signaturePayload, rawSignature);\n    }\n    async post(transaction) {\n        if (typeof transaction === \"string\") {\n            transaction = new transaction_1.default(JSON.parse(transaction));\n        }\n        else if (typeof transaction.readInt32BE === \"function\") {\n            transaction = new transaction_1.default(JSON.parse(transaction.toString()));\n        }\n        else if (typeof transaction === \"object\" &&\n            !(transaction instanceof transaction_1.default)) {\n            transaction = new transaction_1.default(transaction);\n        }\n        if (!(transaction instanceof transaction_1.default)) {\n            throw new Error(`Must be Transaction object`);\n        }\n        if (!transaction.chunks) {\n            await transaction.prepareChunks(transaction.data);\n        }\n        const uploader = await this.getUploader(transaction, transaction.data);\n        // Emulate existing error & return value behavior.\n        try {\n            while (!uploader.isComplete) {\n                await uploader.uploadChunk();\n            }\n        }\n        catch (e) {\n            if (uploader.lastResponseStatus > 0) {\n                return {\n                    status: uploader.lastResponseStatus,\n                    statusText: uploader.lastResponseError,\n                    data: {\n                        error: uploader.lastResponseError,\n                    },\n                };\n            }\n            throw e;\n        }\n        return {\n            status: 200,\n            statusText: \"OK\",\n            data: {},\n        };\n    }\n    /**\n     * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress\n     * and the ability to resume.\n     *\n     * Usage example:\n     *\n     * ```\n     * const uploader = arweave.transactions.getUploader(transaction);\n     * while (!uploader.isComplete) {\n     *   await uploader.uploadChunk();\n     *   console.log(`${uploader.pctComplete}%`);\n     * }\n     * ```\n     *\n     * @param upload a Transaction object, a previously save progress object, or a transaction id.\n     * @param data the data of the transaction. Required when resuming an upload.\n     */\n    async getUploader(upload, data) {\n        let uploader;\n        if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        if (upload instanceof transaction_1.default) {\n            if (!data) {\n                data = upload.data;\n            }\n            if (!(data instanceof Uint8Array)) {\n                throw new Error(\"Data format is invalid\");\n            }\n            if (!upload.chunks) {\n                await upload.prepareChunks(data);\n            }\n            uploader = new transaction_uploader_1.TransactionUploader(this.api, upload);\n            if (!uploader.data || uploader.data.length === 0) {\n                uploader.data = data;\n            }\n        }\n        else {\n            if (typeof upload === \"string\") {\n                upload = await transaction_uploader_1.TransactionUploader.fromTransactionId(this.api, upload);\n            }\n            if (!data || !(data instanceof Uint8Array)) {\n                throw new Error(`Must provide data when resuming upload`);\n            }\n            // upload should be a serialized upload.\n            uploader = await transaction_uploader_1.TransactionUploader.fromSerialized(this.api, upload, data);\n        }\n        return uploader;\n    }\n    /**\n     * Async generator version of uploader\n     *\n     * Usage example:\n     *\n     * ```\n     * for await (const uploader of arweave.transactions.upload(tx)) {\n     *  console.log(`${uploader.pctComplete}%`);\n     * }\n     * ```\n     *\n     * @param upload a Transaction object, a previously save uploader, or a transaction id.\n     * @param data the data of the transaction. Required when resuming an upload.\n     */\n    upload(upload, data) {\n        return __asyncGenerator(this, arguments, function* upload_1() {\n            const uploader = yield __await(this.getUploader(upload, data));\n            while (!uploader.isComplete) {\n                yield __await(uploader.uploadChunk());\n                yield yield __await(uploader);\n            }\n            return yield __await(uploader);\n        });\n    }\n}\nexports.default = Transactions;\n//# sourceMappingURL=transactions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ArweaveUtils = require(\"./lib/utils\");\nrequire(\"arconnect\");\nclass Wallets {\n    constructor(api, crypto) {\n        this.api = api;\n        this.crypto = crypto;\n    }\n    /**\n     * Get the wallet balance for the given address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getBalance(address) {\n        return this.api.get(`wallet/${address}/balance`).then((response) => {\n            return response.data;\n        });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the transaction for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a transaction ID.\n     */\n    getLastTransactionID(address) {\n        return this.api.get(`wallet/${address}/last_tx`).then((response) => {\n            return response.data;\n        });\n    }\n    generate() {\n        return this.crypto.generateJWK();\n    }\n    async jwkToAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            return this.getAddress();\n        }\n        else {\n            return this.getAddress(jwk);\n        }\n    }\n    async getAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            try {\n                // @ts-ignore\n                await arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n            }\n            catch (_a) {\n                // Permission is already granted\n            }\n            // @ts-ignore\n            return arweaveWallet.getActiveAddress();\n        }\n        else {\n            return this.ownerToAddress(jwk.n);\n        }\n    }\n    async ownerToAddress(owner) {\n        return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n    }\n}\nexports.default = Wallets;\n//# sourceMappingURL=wallets.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiloResource = void 0;\nconst ArweaveUtils = require(\"./lib/utils\");\nclass Silo {\n    constructor(api, crypto, transactions) {\n        this.api = api;\n        this.crypto = crypto;\n        this.transactions = transactions;\n    }\n    async get(siloURI) {\n        if (!siloURI) {\n            throw new Error(`No Silo URI specified`);\n        }\n        const resource = await this.parseUri(siloURI);\n        const ids = await this.transactions.search(\"Silo-Name\", resource.getAccessKey());\n        if (ids.length == 0) {\n            throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n        }\n        const transaction = await this.transactions.get(ids[0]);\n        if (!transaction) {\n            throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n        }\n        const encrypted = transaction.get(\"data\", { decode: true, string: false });\n        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n    }\n    async readTransactionData(transaction, siloURI) {\n        if (!siloURI) {\n            throw new Error(`No Silo URI specified`);\n        }\n        const resource = await this.parseUri(siloURI);\n        const encrypted = transaction.get(\"data\", { decode: true, string: false });\n        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n    }\n    async parseUri(siloURI) {\n        const parsed = siloURI.match(/^([a-z0-9-_]+)\\.([0-9]+)/i);\n        if (!parsed) {\n            throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);\n        }\n        const siloName = parsed[1];\n        const hashIterations = Math.pow(2, parseInt(parsed[2]));\n        const digest = await this.hash(ArweaveUtils.stringToBuffer(siloName), hashIterations);\n        const accessKey = ArweaveUtils.bufferTob64(digest.slice(0, 15));\n        const encryptionkey = await this.hash(digest.slice(16, 31), 1);\n        return new SiloResource(siloURI, accessKey, encryptionkey);\n    }\n    async hash(input, iterations) {\n        let digest = await this.crypto.hash(input);\n        for (let count = 0; count < iterations - 1; count++) {\n            digest = await this.crypto.hash(digest);\n        }\n        return digest;\n    }\n}\nexports.default = Silo;\nclass SiloResource {\n    constructor(uri, accessKey, encryptionKey) {\n        this.uri = uri;\n        this.accessKey = accessKey;\n        this.encryptionKey = encryptionKey;\n    }\n    getUri() {\n        return this.uri;\n    }\n    getAccessKey() {\n        return this.accessKey;\n    }\n    getEncryptionKey() {\n        return this.encryptionKey;\n    }\n}\nexports.SiloResource = SiloResource;\n//# sourceMappingURL=silo.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst error_1 = require(\"./lib/error\");\nconst ArweaveUtils = require(\"./lib/utils\");\nclass Chunks {\n    constructor(api) {\n        this.api = api;\n    }\n    async getTransactionOffset(id) {\n        const resp = await this.api.get(`tx/${id}/offset`);\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        throw new Error(`Unable to get transaction offset: ${(0, error_1.getError)(resp)}`);\n    }\n    async getChunk(offset) {\n        const resp = await this.api.get(`chunk/${offset}`);\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        throw new Error(`Unable to get chunk: ${(0, error_1.getError)(resp)}`);\n    }\n    async getChunkData(offset) {\n        const chunk = await this.getChunk(offset);\n        const buf = ArweaveUtils.b64UrlToBuffer(chunk.chunk);\n        return buf;\n    }\n    firstChunkOffset(offsetResponse) {\n        return parseInt(offsetResponse.offset) - parseInt(offsetResponse.size) + 1;\n    }\n    async downloadChunkedData(id) {\n        const offsetResponse = await this.getTransactionOffset(id);\n        const size = parseInt(offsetResponse.size);\n        const endOffset = parseInt(offsetResponse.offset);\n        const startOffset = endOffset - size + 1;\n        const data = new Uint8Array(size);\n        let byte = 0;\n        while (byte < size) {\n            if (this.api.config.logging) {\n                console.log(`[chunk] ${byte}/${size}`);\n            }\n            let chunkData;\n            try {\n                chunkData = await this.getChunkData(startOffset + byte);\n            }\n            catch (error) {\n                console.error(`[chunk] Failed to fetch chunk at offset ${startOffset + byte}`);\n                console.error(`[chunk] This could indicate that the chunk wasn't uploaded or hasn't yet seeded properly to a particular gateway/node`);\n            }\n            if (chunkData) {\n                data.set(chunkData, byte);\n                byte += chunkData.length;\n            }\n            else {\n                throw new Error(`Couldn't complete data download at ${byte}/${size}`);\n            }\n        }\n        return data;\n    }\n}\nexports.default = Chunks;\n//# sourceMappingURL=chunks.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst error_1 = require(\"./lib/error\");\nrequire(\"arconnect\");\nclass Blocks {\n    constructor(api, network) {\n        this.api = api;\n        this.network = network;\n    }\n    /**\n     * Gets a block by its \"indep_hash\"\n     */\n    async get(indepHash) {\n        const response = await this.api.get(`${Blocks.ENDPOINT}${indepHash}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n        else {\n            if (response.status === 404) {\n                throw new error_1.default(\"BLOCK_NOT_FOUND\" /* ArweaveErrorType.BLOCK_NOT_FOUND */);\n            }\n            else {\n                throw new Error(`Error while loading block data: ${response}`);\n            }\n        }\n    }\n    /**\n     * Gets current block data (ie. block with indep_hash = Network.getInfo().current)\n     */\n    async getCurrent() {\n        const { current } = await this.network.getInfo();\n        return await this.get(current);\n    }\n}\nexports.default = Blocks;\nBlocks.ENDPOINT = \"block/hash/\";\n//# sourceMappingURL=blocks.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ar_1 = require(\"./ar\");\nconst api_1 = require(\"./lib/api\");\nconst node_driver_1 = require(\"./lib/crypto/webcrypto-driver\");\nconst network_1 = require(\"./network\");\nconst transactions_1 = require(\"./transactions\");\nconst wallets_1 = require(\"./wallets\");\nconst transaction_1 = require(\"./lib/transaction\");\nconst ArweaveUtils = require(\"./lib/utils\");\nconst silo_1 = require(\"./silo\");\nconst chunks_1 = require(\"./chunks\");\nconst blocks_1 = require(\"./blocks\");\nclass Arweave {\n    constructor(apiConfig) {\n        this.api = new api_1.default(apiConfig);\n        this.wallets = new wallets_1.default(this.api, Arweave.crypto);\n        this.chunks = new chunks_1.default(this.api);\n        this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);\n        this.silo = new silo_1.default(this.api, this.crypto, this.transactions);\n        this.network = new network_1.default(this.api);\n        this.blocks = new blocks_1.default(this.api, this.network);\n        this.ar = new ar_1.default();\n    }\n    /** @deprecated */\n    get crypto() {\n        return Arweave.crypto;\n    }\n    /** @deprecated */\n    get utils() {\n        return Arweave.utils;\n    }\n    getConfig() {\n        return {\n            api: this.api.getConfig(),\n            crypto: null,\n        };\n    }\n    async createTransaction(attributes, jwk) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data && !(attributes.target && attributes.quantity)) {\n            throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);\n        }\n        if (attributes.owner == undefined) {\n            if (jwk && jwk !== \"use_wallet\") {\n                transaction.owner = jwk.n;\n            }\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        if (typeof attributes.data === \"string\") {\n            attributes.data = ArweaveUtils.stringToBuffer(attributes.data);\n        }\n        if (attributes.data instanceof ArrayBuffer) {\n            attributes.data = new Uint8Array(attributes.data);\n        }\n        if (attributes.data && !(attributes.data instanceof Uint8Array)) {\n            throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n        }\n        if (attributes.reward == undefined) {\n            const length = attributes.data ? attributes.data.byteLength : 0;\n            transaction.reward = await this.transactions.getPrice(length, transaction.target);\n        }\n        // here we should call prepare chunk\n        transaction.data_root = \"\";\n        transaction.data_size = attributes.data\n            ? attributes.data.byteLength.toString()\n            : \"0\";\n        transaction.data = attributes.data || new Uint8Array(0);\n        const createdTransaction = new transaction_1.default(transaction);\n        await createdTransaction.getSignatureData();\n        return createdTransaction;\n    }\n    async createSiloTransaction(attributes, jwk, siloUri) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data) {\n            throw new Error(`Silo transactions must have a 'data' value`);\n        }\n        if (!siloUri) {\n            throw new Error(`No Silo URI specified.`);\n        }\n        if (attributes.target || attributes.quantity) {\n            throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);\n        }\n        if (attributes.owner == undefined) {\n            if (!jwk || !jwk.n) {\n                throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);\n            }\n            transaction.owner = jwk.n;\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        const siloResource = await this.silo.parseUri(siloUri);\n        if (typeof attributes.data == \"string\") {\n            const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        if (attributes.data instanceof Uint8Array) {\n            const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        const siloTransaction = new transaction_1.default(transaction);\n        siloTransaction.addTag(\"Silo-Name\", siloResource.getAccessKey());\n        siloTransaction.addTag(\"Silo-Version\", `0.1.0`);\n        return siloTransaction;\n    }\n    arql(query) {\n        return this.api\n            .post(\"/arql\", query)\n            .then((response) => response.data || []);\n    }\n}\nexports.default = Arweave;\nArweave.crypto = new node_driver_1.default();\nArweave.utils = ArweaveUtils;\n//# sourceMappingURL=common.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"./common\");\ncommon_1.default.init = function (apiConfig = {}) {\n    function getDefaultConfig() {\n        const defaults = {\n            host: \"arweave.net\",\n            port: 443,\n            protocol: \"https\",\n        };\n        if (typeof location !== \"object\" ||\n            !location.protocol ||\n            !location.hostname) {\n            return defaults;\n        }\n        // window.location.protocol has a trailing colon (http:, https:, file: etc)\n        const currentProtocol = location.protocol.replace(\":\", \"\");\n        const currentHost = location.hostname;\n        const currentPort = location.port\n            ? parseInt(location.port)\n            : currentProtocol == \"https\"\n                ? 443\n                : 80;\n        const isLocal = [\"localhost\", \"127.0.0.1\"].includes(currentHost) ||\n            currentProtocol == \"file\";\n        // If we're running in what looks like a local dev environment\n        // then default to using arweave.net\n        if (isLocal) {\n            return defaults;\n        }\n        return {\n            host: currentHost,\n            port: currentPort,\n            protocol: currentProtocol,\n        };\n    }\n    const defaultConfig = getDefaultConfig();\n    const protocol = apiConfig.protocol || defaultConfig.protocol;\n    const host = apiConfig.host || defaultConfig.host;\n    const port = apiConfig.port || defaultConfig.port;\n    return new common_1.default(Object.assign(Object.assign({}, apiConfig), { host,\n        protocol,\n        port }));\n};\nif (typeof globalThis === \"object\") {\n    globalThis.Arweave = common_1.default;\n}\nelse if (typeof self === \"object\") {\n    self.Arweave = common_1.default;\n}\n__exportStar(require(\"./common\"), exports);\nexports.default = common_1.default;\n//# sourceMappingURL=index.js.map"],"names":["require$$0","TextDecoder","require$$1","TextEncoder","ArweaveUtils","api","deepHash_1","deepHash","tag","chunks","index","require$$2","error_1","require$$3","transaction","resp","this","crypto","error","transactions","network","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","exports"],"mappings":"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"}