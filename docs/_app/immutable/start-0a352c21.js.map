{"version":3,"mappings":";;;AA4CO,SAAS,eAAe,MAAM,gBAAgB;AACpD,MAAI,SAAS,OAAO,mBAAmB;AAAU,WAAO;AAExD,MAAI,mBAAmB,SAAS;AAC/B,WAAO,KAAK,SAAS,GAAG,IAAI,KAAK,MAAM,GAAG,EAAE,IAAI;AAAA,EAClD,WAAY,mBAAmB,YAAY,CAAC,KAAK,SAAS,GAAG,GAAG;AAC9D,WAAO,OAAO;AAAA,EACd;AAED,SAAO;AACR;AAGO,SAAS,cAAc,QAAQ;AACrC,aAAW,OAAO,QAAQ;AAGzB,WAAO,OAAO,OAAO,KACnB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,WAAW,GAAG,EACtB,QAAQ,WAAW,GAAG,EACtB,QAAQ,WAAW,GAAG,EACtB,QAAQ,WAAW,GAAG,EACtB,QAAQ,WAAW,GAAG,EACtB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,WAAW,GAAG,EACtB,QAAQ,WAAW,GAAG,EACtB,QAAQ,QAAQ,GAAG;AAAA,EACrB;AAED,SAAO;AACR;AAOA,MAAM,yBAAyB,CAAC,QAAQ,YAAY,UAAU,gBAAgB,YAAY,QAAQ;AAM3F,SAAS,eAAe,KAAK,UAAU;AAC7C,QAAM,UAAU,IAAI,IAAI,GAAG;AAE3B,aAAW,YAAY,wBAAwB;AAC9C,QAAI,QAAQ,QAAQ;AAEpB,WAAO,eAAe,SAAS,UAAU;AAAA,MACxC,MAAM;AACL;AACA,eAAO;AAAA,MACP;AAAA,MAED,YAAY;AAAA,MACZ,cAAc;AAAA,IACjB,CAAG;AAAA,EACD;AASD,eAAa,OAAO;AAEpB,SAAO;AACR;AAMO,SAAS,aAAa,KAAK;AACjC,SAAO,eAAe,KAAK,QAAQ;AAAA,IAClC,MAAM;AACL,YAAM,IAAI;AAAA,QACT;AAAA,MACJ;AAAA,IACG;AAAA,EACH,CAAE;AACF;AAgBA,MAAM,cAAc;AAQb,SAAS,gBAAgB,UAAU;AACzC,SAAO,SAAS,QAAQ,OAAO,EAAE,IAAI;AACtC;ACxJO,SAAS,KAAK,OAAO;AAC3B,MAAIA,QAAO;AAEX,MAAI,OAAO,UAAU,UAAU;AAC9B,QAAI,IAAI,MAAM;AACd,WAAO;AAAG,cAAQA,QAAO,KAAM,MAAM,WAAW,EAAE,CAAC;AAAA,EACnD,WAAU,YAAY,OAAO,KAAK,GAAG;AACrC,UAAM,SAAS,IAAI,WAAW,MAAM,QAAQ,MAAM,YAAY,MAAM,UAAU;AAC9E,QAAI,IAAI,OAAO;AACf,WAAO;AAAG,cAAQA,QAAO,KAAM,OAAO,EAAE;AAAA,EAC1C,OAAQ;AACN,UAAM,IAAI,UAAU,sCAAsC;AAAA,EAC1D;AAED,UAAQA,UAAS,GAAG,SAAS,EAAE;AAChC;ACfO,MAAM,eAAe,OAAO;AAyC5B;AACN,SAAO,QAAQ,CAAC,OAAOC,UAAS;AAC/B,UAAM,SAAS,iBAAiB,UAAU,MAAM,UAASA,+BAAM,WAAU;AAEzE,QAAI,WAAW,OAAO;AACrB,YAAM,MAAM,IAAI,IAAI,iBAAiB,UAAU,MAAM,MAAM,MAAM,YAAY,SAAS,OAAO,EAC3F;AACF,YAAM,OAAO,GAAG;AAAA,IAChB;AAED,WAAO,aAAa,OAAOA,KAAI;AAAA,EACjC;AACA;AAEA,MAAM,QAAQ,oBAAI;AASX,SAAS,cAAc,UAAU,UAAU,MAAM;AACvD,QAAM,MAAM,KAAK,UAAU,oBAAoB,UAAU,SAAS,MAAM,QAAQ;AAEhF,MAAI,WAAW,2CAA2C;AAE1D,OAAI,6BAAM,UAAS,OAAO,KAAK,SAAS,YAAY,YAAY,OAAO,KAAK,IAAI,IAAI;AACnF,gBAAY,eAAe,KAAK,KAAK,IAAI;AAAA,EACzC;AAED,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,MAAI,iCAAQ,aAAa;AACxB,UAAM,EAAE,SAASA,MAAM,IAAG,KAAK,MAAM,OAAO,WAAW;AAEvD,UAAM,MAAM,OAAO,aAAa,UAAU;AAC1C,QAAI;AAAK,YAAM,IAAI,UAAU,EAAE,MAAM,aAAM,KAAK,MAAO,OAAO,GAAG,EAAG;AAEpE,WAAO,QAAQ,QAAQ,IAAI,SAAS,MAAMA,KAAI,CAAC;AAAA,EAC/C;AAED,SAAO,aAAa,UAAU,IAAI;AACnC;AAOO,SAAS,iBAAiB,UAAU,MAAM;AAChD,QAAM,SAAS,MAAM,IAAI,QAAQ;AACjC,MAAI,QAAQ;AACX,QAAI,YAAY,QAAQ,OAAO,KAAK;AACnC,aAAO,IAAI,SAAS,OAAO,MAAM,OAAO,IAAI;AAAA,IAC5C;AAED,UAAM,OAAO,QAAQ;AAAA,EACrB;AAED,SAAO,aAAa,UAAU,IAAI;AACnC;AC1GA,MAAM,gBAAgB;AAGf,SAAS,eAAe,IAAI;AAElC,QAAM,QAAQ;AAGd,QAAM,QAAQ;AAGd,QAAM,WAAW;AAIjB,MAAI,qBAAqB;AAEzB,QAAM,UACL,OAAO,MACJ,SACA,IAAI;AAAA,IACJ,IAAI,mBAAmB,EAAE,EACvB,IAAI,CAAC,SAAS,GAAG,aAAa;AAC9B,YAAM,kBAAkB,mBAAmB,OAAO;AAElD,YAAM,aAAa,+BAA+B,KAAK,eAAe;AACtE,UAAI,YAAY;AACf,cAAM,KAAK,WAAW,EAAE;AACxB,cAAM,KAAK,WAAW,EAAE;AACxB,iBAAS,KAAK,KAAK;AACnB,eAAO;AAAA,MACP;AAED,YAAM,iBAAiB,6BAA6B,KAAK,eAAe;AACxE,UAAI,gBAAgB;AACnB,cAAM,KAAK,eAAe,EAAE;AAC5B,cAAM,KAAK,eAAe,EAAE;AAC5B,iBAAS,KAAK,IAAI;AAClB,eAAO;AAAA,MACP;AAED,YAAM,UAAU,MAAM,SAAS,SAAS;AAExC,UAAI,CAAC,iBAAiB;AACrB;AAAA,MACA;AAED,YAAM,QAAQ,gBAAgB,MAAM,iBAAiB;AACrD,YAAM,SAAS,MACb,IAAI,CAAC,SAASC,OAAM;AACpB,YAAIA,KAAI,GAAG;AACV,gBAAM,QAAQ,cAAc,KAAK,OAAO;AACxC,cAAI,CAAC,OAAO;AACX,kBAAM,IAAI;AAAA,cACT,kBAAkB;AAAA,YAC9B;AAAA,UACW;AAED,gBAAM,GAAG,aAAa,SAAS,MAAM,IAAI,IAAI;AAK7C,gBAAM,KAAK,IAAI;AACf,gBAAM,KAAK,IAAI;AACf,mBAAS,KAAK,CAAC,CAAC,WAAW;AAC3B,iBAAO,UAAU,UAAU,cAAc,aAAa;AAAA,QACtD;AAED,YAAI,WAAW,QAAQ,SAAS,GAAG;AAAG,+BAAqB;AAE3D,eACC,QACE,UAAW,EAIX,QAAQ,WAAW,GAAG,EACtB,QAAQ,WAAW,GAAG,EAKtB,QAAQ,MAAM,KAAK,EACnB,QAAQ,OAAO,KAAK,EAEpB,QAAQ,uBAAuB,MAAM;AAAA,MAEjD,CAAS,EACA,KAAK,EAAE;AAET,aAAO,MAAM;AAAA,IACpB,CAAO,EACA,KAAK,EAAE,IAAI,qBAAqB,OAAO;AAAA,EAC9C;AAEC,SAAO,EAAE,SAAS,OAAO,OAAO,SAAQ;AACzC;AAMA,SAAS,aAAa,SAAS;AAC9B,SAAO,CAAC,cAAc,KAAK,OAAO;AACnC;AASO,SAAS,mBAAmB,OAAO;AACzC,SAAO,MAAM,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,OAAO,YAAY;AACrD;AAWO,SAAS,KAAK,OAAO,EAAE,OAAO,OAAO,SAAU,GAAEC,WAAU;AAEjE,QAAM,SAAS;AAEf,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACzC,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM;AACnB,QAAI,QAAQ,MAAM,IAAI;AAEtB,QAAI,SAAS,CAAC,SAAS,IAAI;AAC1B,UAAI,MAAM;AACT,cAAM,UAAUA,UAAS;AACzB,YAAI,CAAC;AAAS,gBAAM,IAAI,MAAM,YAAY,qBAAqB;AAE/D,YAAI,CAAC,QAAQ,KAAK;AAAG;AAAA,MACrB;AAED,aAAO,QAAQ,wBAAS;AAAA,IACxB;AAAA,EACD;AAED,SAAO;AACR;AC5IO,SAAS,MAAMC,QAAOC,eAAcC,aAAYH,WAAU;AAChE,QAAM,2BAA2B,IAAI,IAAIE,aAAY;AAErD,SAAO,OAAO,QAAQC,WAAU,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,SAAS,MAAM,CAAC,MAAM;AACxE,UAAM,EAAE,SAAS,OAAO,OAAO,aAAa,eAAe,EAAE;AAE7D,UAAM,QAAQ;AAAA,MACb;AAAA,MAEA,MAAM,CAAC,SAAS;AACf,cAAM,QAAQ,QAAQ,KAAK,IAAI;AAC/B,YAAI;AAAO,iBAAO,KAAK,OAAO,EAAE,OAAO,OAAO,YAAYH,SAAQ;AAAA,MAClE;AAAA,MACD,QAAQ,CAAC,GAAG,GAAI,UAAU,CAAE,CAAC,EAAE,IAAI,CAAC,MAAMC,OAAM,EAAE;AAAA,MAClD,SAAS,CAAC,GAAG,GAAI,WAAW,EAAG,EAAE,IAAI,oBAAoB;AAAA,MACzD,MAAM,mBAAmB,IAAI;AAAA,IAChC;AAKE,UAAM,OAAO,SAAS,MAAM,QAAQ,SAAS,KAAK;AAAA,MACjD,MAAM,OAAO;AAAA,MACb,MAAM,QAAQ;AAAA,IACjB;AAEE,WAAO;AAAA,EACT,CAAE;AAMD,WAAS,mBAAmB,IAAI;AAG/B,UAAM,mBAAmB,KAAK;AAC9B,QAAI;AAAkB,WAAK,CAAC;AAC5B,WAAO,CAAC,kBAAkBA,OAAM,GAAG;AAAA,EACnC;AAMD,WAAS,qBAAqB,IAAI;AAGjC,WAAO,OAAO,SAAY,KAAK,CAAC,yBAAyB,IAAI,EAAE,GAAGA,OAAM,GAAG;AAAA,EAC3E;AACF;;;;;AChByB,4BAAW;;;;cAAUG,KAAM;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAANA,KAAM;;;AAA3B,mDAAW,KAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJZ,4BAAW;;;;cAAUA,KAAM;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAANA,KAAM;;;;AAA3B,mDAAW,KAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACX,4BAAW;;;;cAAUA,KAAM;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAANA,KAAM;;;AAA3B,mDAAW,KAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAQ/B,IAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADf,uBAIK;;;;;UAHCA,KAAS;;;;;;;;;;;;;;;;;;;;;;;;;eACZ,IAAK;AAAA;;6BAAL,IAAK;AAAA;;;;;;oBAALA,KAAK;AAAA;;;;;;;;;;;;;;;;AAXJ,gBAAW;AAAC;;;;;kBAQZ,IAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAAPA,KAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAxCA,gBAAM;QACN,KAAI;QAEJ,WAAU;QACV,KAAI;AACJ,iBAAS,KAAI;AACb,iBAAS,KAAI;AAOxB,cAAYC,QAAO,KAAK,MAAM;AAE1B,gBAAU;AACV,kBAAY;AACZ,cAAQ;AAEZ,UAAO;AACA,wBAAcA,QAAO,KAAK,UAAS;UACpC,SAAO;AACV,oCAAY,IAAI;AAChB,gCAAQ,SAAS,SAAS,eAAe;AAAA;;AAI3C,8BAAU,IAAI;WACP;AAAA;;;;;;;;;;;;;;;;;AAhBL,cAAO,KAAK,IAAI,IAAI;AAAA;;;;;;;;;;;;;;;;;AClBjB,MAAM,WAAW,CAAE;ACEhB,MAAM,QAAQ;AAAA,EAAC,MAAK,oBAAC,OAAO,2BAAW;AAAA,EAChD,0BAAM,OAAO,2BAAW;AAAA,EACxB,MAAM,2BAAO,2BAAY;AAAA;AAEhB,MAAM,eAAe;AAErB,MAAM,aAAa;AAAA,EAC5B,KAAK,CAAC,CAAC;AACR;AAEU,MAAM,QAAQ;AAAA,EACpB,aAAc,CAAC,EAAE,MAAO,MAAK;AAAE,YAAQ,MAAM,KAAK;AAAA;AAClD;ACdG,MAAM,UAAU;AAAA,EAKtB,YAAY,QAAQ,MAAM;AACzB,SAAK,SAAS;AACd,QAAI,OAAO,SAAS,UAAU;AAC7B,WAAK,OAAO,EAAE,SAAS,KAAI;AAAA,IAC3B,WAAU,MAAM;AAChB,WAAK,OAAO;AAAA,IACf,OAAS;AACN,WAAK,OAAO,EAAE,SAAS,UAAU;IACjC;AAAA,EACD;AAAA,EAED,WAAW;AACV,WAAO,KAAK,UAAU,KAAK,IAAI;AAAA,EAC/B;AACF;AAEO,MAAM,SAAS;AAAA,EAKrB,YAAY,QAAQC,WAAU;AAC7B,SAAK,SAAS;AACd,SAAK,WAAWA;AAAA,EAChB;AACF;ACxBO,eAAe,gBAAgB,QAAQ;;AAC7C,aAAW,OAAO,QAAQ;AACzB,QAAI,SAAO,YAAO,SAAP,mBAAa,UAAS,YAAY;AAC5C,aAAO,OAAO;AAAA,QACb,MAAM,QAAQ,IAAI,OAAO,QAAQ,MAAM,EAAE,IAAI,OAAO,CAACC,MAAK,KAAK,MAAM,CAACA,MAAK,MAAM,KAAK,CAAC,CAAC;AAAA,MAC5F;AAAA,IACG;AAAA,EACD;AAED,SAAO;AACR;ACiB2B,OAAO,oBAAoB,OAAO,SAAS,EACpE,KAAM,EACN,KAAK,IAAI;ACvBgB,OAAO,oBAAoB,OAAO,SAAS,EACpE,KAAM,EACN,KAAK,IAAI;ACdJ,MAAM,YAAY;AAClB,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,gBAAgB;ACgBtB,SAAS,UAAU,QAAQ;AACjC,MAAI,OAAO,WAAW;AAAU,WAAO,QAAQ,QAAQ,IAAI;AAE3D,MAAI,CAAC,MAAM,QAAQ,MAAM,KAAK,OAAO,WAAW,GAAG;AAClD,UAAM,IAAI,MAAM,eAAe;AAAA,EAC/B;AAED,QAAM,SAA+B;AAErC,QAAM,WAAW,MAAM,OAAO,MAAM;AAGpC,WAAS,QAAQ,OAAO,aAAa,OAAO;AAC3C,QAAI,UAAU;AAAW,aAAO;AAChC,QAAI,UAAU;AAAK,aAAO;AAC1B,QAAI,UAAU;AAAmB,aAAO;AACxC,QAAI,UAAU;AAAmB,aAAO;AACxC,QAAI,UAAU;AAAe,aAAO;AAEpC,QAAI;AAAY,YAAM,IAAI,MAAM,eAAe;AAE/C,QAAI,SAAS;AAAU,aAAO,SAAS;AAEvC,UAAM,QAAQ,OAAO;AAErB,QAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACxC,eAAS,SAAS;AAAA,IAClB,WAAU,MAAM,QAAQ,KAAK,GAAG;AAChC,UAAI,OAAO,MAAM,OAAO,UAAU;AACjC,cAAM,OAAO,MAAM;AAEnB,gBAAQ,MAAI;AAAA,UACX,KAAK;AACJ,qBAAS,SAAS,IAAI,KAAK,MAAM,EAAE;AACnC;AAAA,UAED,KAAK;AACJ,kBAAM,MAAM,oBAAI;AAChB,qBAAS,SAAS;AAClB,qBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACzC,kBAAI,IAAI,QAAQ,MAAM,EAAE,CAAC;AAAA,YACzB;AACD;AAAA,UAED,KAAK;AACJ,kBAAM,MAAM,oBAAI;AAChB,qBAAS,SAAS;AAClB,qBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACzC,kBAAI,IAAI,QAAQ,MAAM,EAAE,GAAG,QAAQ,MAAM,IAAI,EAAE,CAAC;AAAA,YAChD;AACD;AAAA,UAED,KAAK;AACJ,qBAAS,SAAS,IAAI,OAAO,MAAM,IAAI,MAAM,EAAE;AAC/C;AAAA,UAED,KAAK;AACJ,qBAAS,SAAS,OAAO,MAAM,EAAE;AACjC;AAAA,UAED,KAAK;AACJ,qBAAS,SAAS,OAAO,MAAM,EAAE;AACjC;AAAA,UAED,KAAK;AACJ,kBAAM,MAAM,uBAAO,OAAO,IAAI;AAC9B,qBAAS,SAAS;AAClB,qBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACzC,kBAAI,MAAM,MAAM,QAAQ,MAAM,IAAI,EAAE;AAAA,YACpC;AACD;AAAA,QACD;AAAA,MACL,OAAU;AACN,cAAM,QAAQ,IAAI,MAAM,MAAM,MAAM;AACpC,iBAAS,SAAS;AAElB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACzC,gBAAM,IAAI,MAAM;AAChB,cAAI,MAAM;AAAM;AAEhB,gBAAM,KAAK,QAAQ,CAAC;AAAA,QACpB;AAAA,MACD;AAAA,IACJ,OAAS;AAEN,YAAM,SAAS;AACf,eAAS,SAAS;AAElB,iBAAW,OAAO,OAAO;AACxB,cAAM,IAAI,MAAM;AAChB,eAAO,OAAO,QAAQ,CAAC;AAAA,MACvB;AAAA,IACD;AAED,WAAO,SAAS;AAAA,EAChB;AAED,SAAO,QAAQ,CAAC;AACjB;ACpGA,MAAM,aAAa;AACnB,MAAM,YAAY;AAElB,MAAM,SAAS,MAAM,OAAO,cAAc,YAAY,QAAQ;AAE9D,MAAM,wBAAwB,MAAM;AACpC,MAAM,uBAAuB,MAAM;AAInC;AACA;AASA,IAAI,mBAAmB;AACvB,IAAI;AACH,qBAAmB,KAAK,MAAM,eAAe,WAAW;AACzD,QAAE;AAEF;AAGA,SAAS,wBAAwB,OAAO;AACvC,mBAAiB,SAAS;AAC3B;AA4BO,SAAS,cAAc,EAAE,QAAQ,MAAM,eAAc,GAAI;;AAE/D,QAAM,cAAc;AAGpB,MAAI,aAAa;AAEjB,QAAM,YAAY;AAAA,IAEjB,iBAAiB,CAAE;AAAA,IAGnB,gBAAgB,CAAE;AAAA,EACpB;AAGC,MAAI,UAAU;AAAA,IACb,QAAQ,CAAE;AAAA,IACV,OAAO;AAAA,IAEP,KAAK;AAAA,EACP;AAGC,MAAI,WAAW;AACf,MAAI,UAAU;AACd,MAAI,aAAa;AACjB,MAAI,WAAW;AACf,MAAI,aAAa;AACjB,MAAI,kBAAkB;AAEtB,MAAI,qBAAqB;AAGzB,MAAI;AAGJ,MAAI,yBAAwB,aAAQ,UAAR,mBAAgB;AAE5C,MAAI,CAAC,uBAAuB;AAG3B,4BAAwB,KAAK;AAG7B,YAAQ;AAAA,MACP,EAAE,GAAG,QAAQ,OAAO,CAAC,YAAY,sBAAuB;AAAA,MACxD;AAAA,MACA,SAAS;AAAA,IACZ;AAAA,EACE;AAID,QAAM,SAAS,iBAAiB;AAChC,MAAI,QAAQ;AACX,YAAQ,oBAAoB;AAC5B,aAAS,OAAO,GAAG,OAAO,CAAC;AAAA,EAC3B;AAGD,MAAI;AAGJ,MAAI;AAGJ,MAAI;AAEJ,iBAAe,aAAa;AAI3B,yBAAqB,sBAAsB,QAAQ;AACnD,UAAM;AACN,yBAAqB;AAErB,UAAM,MAAM,IAAI,IAAI,SAAS,IAAI;AACjC,UAAM,SAAS,sBAAsB,KAAK,IAAI;AAK9C,iBAAa;AACb,UAAM,OAAO,QAAQ,KAAK,CAAE;AAAA,EAC5B;AAQD,iBAAe,KACd,KACA;AAAA,IACC,WAAW;AAAA,IACX,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,QAAQ,CAAE;AAAA,IACV,gBAAgB;AAAA,EAChB,GACD,gBACA,WACC;AACD,QAAI,OAAO,QAAQ,UAAU;AAC5B,YAAM,IAAI,IAAI,KAAK,aAAa,QAAQ,CAAC;AAAA,IACzC;AAED,WAAO,SAAS;AAAA,MACf;AAAA,MACA,QAAQ,WAAW,aAAY,IAAK;AAAA,MACpC,WAAW;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACR;AAAA,QACA;AAAA,MACA;AAAA,MACD;AAAA,MACA,UAAU,MAAM;AACf,YAAI,eAAe;AAClB,+BAAqB;AAAA,QACrB;AAAA,MACD;AAAA,MACD,SAAS,MAAM;AAAA,MAAE;AAAA,MACjB,MAAM;AAAA,IACT,CAAG;AAAA,EACD;AAGD,iBAAe,SAAS,KAAK;AAC5B,UAAM,SAAS,sBAAsB,KAAK,KAAK;AAE/C,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,iEAAiE,KAAK;AAAA,IACtF;AAED,iBAAa,EAAE,IAAI,OAAO,IAAI,SAAS,WAAW,MAAM;AAExD,WAAO,WAAW;AAAA,EAClB;AAWD,iBAAe,OAAO,QAAQ,KAAK,gBAAgB,MAAM,YAAY,CAAE,GAAE,UAAU;;AAClF,YAAQ;AACR,QAAI,oBAAoB,UAAW,MAAM,WAAW,MAAM;AAE1D,QAAI,CAAC,mBAAmB;AACvB,0BAAoB,MAAM;AAAA,QACzB;AAAA,QACA,EAAE,IAAI,KAAM;AAAA,QACZ,aAAa,IAAI,MAAM,cAAc,IAAI,UAAU,GAAG;AAAA,UACrD;AAAA,UACA,QAAQ,CAAE;AAAA,UACV,OAAO,EAAE,IAAI,KAAM;AAAA,QACxB,CAAK;AAAA,QACD;AAAA,MACJ;AAAA,IACG;AAID,WAAM,iCAAQ,QAAO;AAGrB,QAAI,UAAU;AAAW,aAAO;AAEhC,QAAI,kBAAkB,SAAS,YAAY;AAC1C,UAAI,eAAe,SAAS,MAAM,eAAe,SAAS,IAAI,QAAQ,GAAG;AACxE,4BAAoB,MAAM,qBAAqB;AAAA,UAC9C,QAAQ;AAAA,UACR,OAAO,aAAa,IAAI,MAAM,eAAe,GAAG,EAAE,KAAK,QAAQ,CAAE,GAAE,OAAO,EAAE,IAAI,KAAM,GAAE;AAAA,UACxF;AAAA,UACA,OAAO,EAAE,IAAI,KAAM;AAAA,QACxB,CAAK;AAAA,MACL,OAAU;AACN;AAAA,UACC,IAAI,IAAI,kBAAkB,UAAU,GAAG,EAAE;AAAA,UACzC,CAAE;AAAA,UACF,CAAC,GAAG,gBAAgB,IAAI,QAAQ;AAAA,UAChC;AAAA,QACL;AACI,eAAO;AAAA,MACP;AAAA,IACD,aAAU,8BAAkB,UAAlB,oBAAyB,SAAzB,mBAA+B,WAAU,KAAK;AACxD,YAAM,UAAU,MAAM,OAAO,QAAQ,MAAK;AAC1C,UAAI,SAAS;AACZ,cAAM,kBAAkB,GAAG;AAAA,MAC3B;AAAA,IACD;AAID,gBAAY,SAAS;AACrB,yBAAqB;AAErB,eAAW;AAEX,QAAI,QAAQ,KAAK,SAAS;AACzB,YAAM,EAAE,QAAS,IAAG;AACpB,YAAM,SAAS,QAAQ,eAAe,IAAI;AAC1C,cAAQ,MAAM,aAAa,yBAAyB;AACpD,cAAQ,QAAQ,eAAe,iBAAiB,aAAa,QAAQ,OAAO,IAAI,GAAG;AAAA,IACnF;AAGD,iBAAa;AAEb,QAAI,SAAS;AACZ,gBAAU,kBAAkB;AAE5B,UAAI,kBAAkB,MAAM,MAAM;AACjC,0BAAkB,MAAM,KAAK,MAAM;AAAA,MACnC;AAED,YAAM,cAAc;AACpB,WAAK,KAAK,kBAAkB,KAAK;AACjC;IACH,OAAS;AACN,iBAAW,iBAAiB;AAAA,IAC5B;AAGD,QAAI,MAAM;AACT,YAAM,EAAE,iBAAQ,UAAW,IAAG;AAE9B,UAAI,CAAC,WAAW;AAMf,cAAMC,QAAO,SAAS;AACtB,cAAM,WAAWA,MAAK,aAAa,UAAU;AAE7C,cAAK,WAAW;AAChB,cAAK,MAAM,EAAE,eAAe,KAAM;AAElC,mBAAW,MAAM;;AAChB,8BAAY,MAAZ,oBAAgB;AAAA,QACrB,CAAK;AAGD,YAAI,aAAa,MAAM;AACtB,gBAAK,aAAa,YAAY,QAAQ;AAAA,QAC3C,OAAW;AACN,gBAAK,gBAAgB,UAAU;AAAA,QAC/B;AAAA,MACD;AAGD,YAAM,KAAI;AAEV,UAAI,YAAY;AACf,cAAM,cAAc,IAAI,QAAQ,SAAS,eAAe,IAAI,KAAK,MAAM,CAAC,CAAC;AACzE,YAAIC,SAAQ;AACX,mBAASA,QAAO,GAAGA,QAAO,CAAC;AAAA,QAC3B,WAAU,aAAa;AAIvB,sBAAY,eAAc;AAAA,QAC/B,OAAW;AACN,mBAAS,GAAG,CAAC;AAAA,QACb;AAAA,MACD;AAAA,IACJ,OAAS;AAEN,YAAM,KAAI;AAAA,IACV;AAED,iBAAa;AAEb,QAAI,kBAAkB,MAAM,MAAM;AACjC,aAAO,kBAAkB,MAAM;AAAA,IAC/B;AAED,QAAI;AAAU;AAEd,eAAW;AAAA,EACX;AAGD,WAAS,WAAW,QAAQ;;AAC3B,cAAU,OAAO;AAEjB,UAAM,QAAQ,SAAS,cAAc,uBAAuB;AAC5D,QAAI;AAAO,YAAM;AAEjB,WAAO,OAAO,MAAM;AAEpB,UAAM,cAAc;AACpB,WAAO,IAAI,KAAK;AAAA,MACf;AAAA,MACA,OAAO,EAAE,GAAG,OAAO,OAAO,OAAQ;AAAA,MAClC,SAAS;AAAA,IACZ,CAAG;AACD;AAGA,UAAM,aAAa;AAAA,MAClB,MAAM;AAAA,MACN,IAAI,mBAAmB,MAAM;AAAA,QAC5B,QAAQ,QAAQ;AAAA,QAChB,OAAO,EAAE,KAAI,oBAAQ,UAAR,oBAAe,OAAf,YAAqB,KAAM;AAAA,QACxC,KAAK,IAAI,IAAI,SAAS,IAAI;AAAA,MAC9B,CAAI;AAAA,MACD,YAAY;AAAA,MACZ,MAAM;AAAA,IACT;AACE,cAAU,eAAe,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAC;AAEvD,cAAU;AAAA,EACV;AAcD,iBAAe,kCAAkC;AAAA,IAChD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAI;;AACF,UAAM,WAA2D,OAAO,OAAO,OAAO;AAGtF,UAAM,SAAS;AAAA,MACd,MAAM;AAAA,MACN,OAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACA;AAAA,MACD,OAAO;AAAA,QACN,YAAY,SAAS,IAAI,CAAC,gBAAgB,YAAY,KAAK,SAAS;AAAA,MACpE;AAAA,IACJ;AAEE,QAAI,SAAS,QAAW;AACvB,aAAO,MAAM,OAAO;AAAA,IACpB;AAED,QAAI,OAAO;AACX,QAAI,eAAe,CAAC;AACpB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC5C,YAAM,OAAO,SAAS;AACtB,aAAO,EAAE,GAAG,MAAM,GAAG,KAAK,KAAI;AAG9B,UAAI,gBAAgB,CAAC,QAAQ,OAAO,KAAK,CAAC,aAAa,aAAa,IAAI,GAAG;AAC1E,eAAO,MAAM,QAAQ,OAAO;AAC5B,uBAAe,gBAAgB,OAAO,MAAKC,WAAK,SAAL,aAAa,CAAE,GAAE,SAAS;AAAA,MACrE;AAAA,IACD;AACD,QAAI,CAAC,cAAc;AAIlB,qBAAe,OAAO,KAAK,KAAK,IAAI,EAAE,WAAW,OAAO,KAAK,IAAI,EAAE;AAAA,IACnE;AAED,UAAM,eACL,CAAC,QAAQ,OACT,IAAI,SAAS,QAAQ,IAAI,QACzB,QAAQ,UAAU,SAClB,SAAS,UACT;AAED,QAAI,cAAc;AACjB,aAAO,MAAM,OAAO;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QAEA,MAAM,eAAe,OAAO,KAAK;AAAA,MACrC;AAOG,YAAM,cAAc,CAAC,UAAU,gBAAgB;AAC9C,eAAO,eAAe,OAAO,MAAM,MAAM,UAAU;AAAA,UAClD,KAAK,MAAM;AACV,kBAAM,IAAI,MAAM,SAAS,2CAA2C,aAAa;AAAA,UACjF;AAAA,QACN,CAAK;AAAA,MACL;AAEG,kBAAY,UAAU,QAAQ;AAC9B,kBAAY,QAAQ,UAAU;AAC9B,kBAAY,SAAS,cAAc;AAAA,IACnC;AAED,WAAO;AAAA,EACP;AAgBD,iBAAe,UAAU,EAAE,QAAQ,QAAQ,KAAK,QAAQ,OAAO,oBAAoB;;AAElF,QAAI,OAAO;AAGX,UAAM,OAAO;AAAA,MACZ,cAAc,oBAAI,IAAK;AAAA,MACvB,QAAQ,oBAAI,IAAK;AAAA,MACjB,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,KAAK;AAAA,IACR;AAEE,UAAM,OAAO,MAAM;AAEnB,SAAIA,WAAK,WAAL,oBAAa,MAAM;AAEtB,UAAS,UAAT,YAAoB,MAAM;AACzB,mBAAW,OAAO,MAAM;AACvB,gBAAM,EAAE,KAAI,IAAK,IAAI,IAAI,KAAK,GAAG;AACjC,eAAK,aAAa,IAAI,IAAI;AAAA,QAC1B;AAAA,MACD;AAGD,YAAM,aAAa;AAAA,QAClB,OAAO;AAAA,UACN,IAAI,KAAK;AACR,iBAAK,QAAQ;AACb,mBAAO,MAAM;AAAA,UACb;AAAA,QACD;AAAA,QACD,QAAQ,IAAI,MAAM,QAAQ;AAAA,UACzB,KAAK,CAACC,SAAQ,QAAQ;AACrB,iBAAK,OAAO,IAA2B;AACvC,mBAAOA,QAA8B;AAAA,UACrC;AAAA,QACN,CAAK;AAAA,QACD,OAAM,0DAAkB,SAAlB,YAA0B;AAAA,QAChC,KAAK,eAAe,KAAK,MAAM;AAC9B,eAAK,MAAM;AAAA,QAChB,CAAK;AAAA,QACD,MAAM,MAAM,UAAUb,OAAM;AAC3B,cAAI;AAEJ,cAAI,oBAAoB,SAAS;AAChC,wBAAY,SAAS;AAIrB,oBAAO;AAAA,cAGN,MACC,SAAS,WAAW,SAAS,SAAS,WAAW,SAC9C,SACA,MAAM,SAAS,KAAM;AAAA,cACzB,OAAO,SAAS;AAAA,cAChB,aAAa,SAAS;AAAA,cACtB,SAAS,SAAS;AAAA,cAClB,WAAW,SAAS;AAAA,cACpB,WAAW,SAAS;AAAA,cACpB,QAAQ,SAAS;AAAA,cACjB,MAAM,SAAS;AAAA,cACf,UAAU,SAAS;AAAA,cACnB,UAAU,SAAS;AAAA,cACnB,gBAAgB,SAAS;AAAA,cACzB,QAAQ,SAAS;AAAA,cACjB,GAAGA;AAAA,YACV;AAAA,UACA,OAAY;AACN,wBAAY;AAAA,UACZ;AAGD,gBAAM,WAAW,IAAI,IAAI,WAAW,GAAG,EAAE;AACzC,kBAAQ,QAAQ;AAGhB,iBAAO,UACJ,iBAAiB,UAAUA,KAAI,IAC/B,cAAc,WAAW,UAAUA,KAAI;AAAA,QAC1C;AAAA,QACD,YAAY,MAAM;AAAA,QAAE;AAAA,QACpB;AAAA,QACA,SAAS;AACR,eAAK,SAAS;AACd,iBAAO,OAAM;AAAA,QACb;AAAA,MACL;AAGG,aAAO,iBAAiB,YAAY;AAAA,QACnC,OAAO;AAAA,UACN,MAAM;AACL,kBAAM,IAAI;AAAA,cACT;AAAA,YACP;AAAA,UACM;AAAA,UACD,YAAY;AAAA,QACZ;AAAA,QACD,SAAS;AAAA,UACR,MAAM;AACL,kBAAM,IAAI;AAAA,cACT;AAAA,YACP;AAAA,UACM;AAAA,UACD,YAAY;AAAA,QACZ;AAAA,QACD,OAAO;AAAA,UACN,MAAM;AACL,kBAAM,IAAI;AAAA,cACT;AAAA,YACP;AAAA,UACM;AAAA,UACD,YAAY;AAAA,QACZ;AAAA,QACD,SAAS;AAAA,UACR,MAAM;AACL,kBAAM,IAAI,MAAM,uCAAuC;AAAA,UACvD;AAAA,UACD,YAAY;AAAA,QACZ;AAAA,MACL,CAAI;AASM;AACN,gBAAQ,WAAM,KAAK,OAAO,KAAK,KAAK,MAAM,UAAU,MAA5C,YAAkD;AAAA,MAC1D;AACD,aAAO,OAAO,MAAM,gBAAgB,IAAI,IAAI;AAAA,IAC5C;AAED,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,UAAQ,UAAK,WAAL,mBAAa,QAAO,EAAE,MAAM,QAAQ,MAAM,KAAI,IAAK;AAAA,MAC3D,OAAM,2BAAQ,qDAAkB,SAA1B,YAAkC;AAAA,IAC3C;AAAA,EACE;AASD,WAAS,YAAY,gBAAgB,eAAe,aAAa,MAAM,QAAQ;AAC9E,QAAI;AAAoB,aAAO;AAE/B,QAAI,CAAC;AAAM,aAAO;AAElB,QAAI,KAAK,UAAU;AAAgB,aAAO;AAC1C,QAAI,KAAK,SAAS;AAAe,aAAO;AACxC,QAAI,KAAK,OAAO;AAAa,aAAO;AAEpC,eAAW,SAAS,KAAK,QAAQ;AAChC,UAAI,OAAO,WAAW,QAAQ,OAAO;AAAQ,eAAO;AAAA,IACpD;AAED,eAAW,QAAQ,KAAK,cAAc;AACrC,UAAI,YAAY,KAAK,CAAC,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC;AAAG,eAAO;AAAA,IACxD;AAED,WAAO;AAAA,EACP;AAOD,WAAS,iBAAiB,MAAM,UAAU;;AACzC,SAAI,6BAAM,UAAS,QAAQ;AAC1B,aAAO;AAAA,QACN,MAAM;AAAA,QACN,MAAM,KAAK;AAAA,QACX,MAAM;AAAA,UACL,cAAc,IAAI,KAAIY,WAAK,KAAK,iBAAV,aAA0B,EAAE;AAAA,UAClD,QAAQ,IAAI,KAAI,UAAK,KAAK,WAAV,YAAoB,EAAE;AAAA,UACtC,QAAQ,CAAC,CAAC,KAAK,KAAK;AAAA,UACpB,OAAO,CAAC,CAAC,KAAK,KAAK;AAAA,UACnB,KAAK,CAAC,CAAC,KAAK,KAAK;AAAA,QACjB;AAAA,MACL;AAAA,IACA,YAAa,6BAAM,UAAS,QAAQ;AACjC,aAAO,8BAAY;AAAA,IACnB;AACD,WAAO;AAAA,EACP;AAMD,iBAAe,WAAW,EAAE,IAAI,cAAc,KAAK,QAAQ,SAAS;;AACnE,SAAI,yCAAY,QAAO,IAAI;AAC1B,aAAO,WAAW;AAAA,IAClB;AAED,UAAM,EAAE,QAAQ,SAAS,KAAI,IAAK;AAElC,UAAM,UAAU,CAAC,GAAG,SAAS,IAAI;AAKjC,WAAO,QAAQ,CAAC,WAAW,mCAAW,MAAM,MAAM;AAAA,IAAE,EAAC;AACrD,YAAQ,QAAQ,CAAC,WAAW,iCAAS,KAAK,MAAM,MAAM;AAAA,IAAE,EAAC;AAGzD,QAAI,cAAc;AAElB,UAAM,cAAc,QAAQ,MAAM,OAAO,QAAQ,IAAI,WAAW,QAAQ,IAAI,SAAS;AACrF,UAAM,gBAAgB,QAAQ,QAAQ,OAAO,QAAQ,MAAM,KAAK;AAEhE,UAAM,uBAAuB,QAAQ,OAAO,CAAC,KAAK,QAAQ,MAAM;;AAC/D,YAAM,WAAW,QAAQ,OAAO;AAEhC,YAAM,UACL,CAAC,EAAC,iCAAS,SACV,qCAAU,YAAW,OAAO,MAC5B;AAAA,QACC,IAAI,KAAK,OAAO;AAAA,QAChB;AAAA,QACA;AAAA,SACAA,eAAS,WAAT,oBAAiB;AAAA,QACjB;AAAA,MACN;AAEG,UAAI,KAAK,OAAO;AAChB,aAAO;AAAA,IACP,GAA4B,CAAE;AAE/B,QAAI,qBAAqB,KAAK,OAAO,GAAG;AACvC,UAAI;AACH,sBAAc,MAAM,UAAU,KAAK,oBAAoB;AAAA,MACvD,SAAQ,OAAP;AACD,eAAO,qBAAqB;AAAA,UAC3B,QAAQ;AAAA,UACR,OAAO,aAAa,OAAO,EAAE,KAAK,QAAQ,OAAO,EAAE,IAAI,MAAM,GAAI,GAAE;AAAA,UACnE;AAAA,UACA;AAAA,QACL,CAAK;AAAA,MACD;AAED,UAAI,YAAY,SAAS,YAAY;AACpC,eAAO;AAAA,MACP;AAAA,IACD;AAED,UAAM,oBAAoB,2CAAa;AAEvC,QAAI,iBAAiB;AAErB,UAAM,kBAAkB,QAAQ,IAAI,OAAO,QAAQ,MAAM;;AACxD,UAAI,CAAC;AAAQ;AAGb,YAAM,WAAW,QAAQ,OAAO;AAEhC,YAAM,mBAAmB,uDAAoB;AAG7C,YAAM,SACJ,CAAC,oBAAoB,iBAAiB,SAAS,WAChD,OAAO,QAAO,qCAAU,WACxB,CAAC,YAAY,gBAAgB,eAAe,cAAaA,eAAS,WAAT,oBAAiB,MAAM,MAAM;AACvF,UAAI;AAAO,eAAO;AAElB,uBAAiB;AAEjB,WAAI,qDAAkB,UAAS,SAAS;AAEvC,cAAM;AAAA,MACN;AAED,aAAO,UAAU;AAAA,QAChB,QAAQ,OAAO;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,YAAY;;AACnB,gBAAM,OAAO;AACb,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC9B,mBAAO,OAAO,OAAOA,YAAM,gBAAgB,OAAtB,oBAA2B,IAAI;AAAA,UACpD;AACD,iBAAO;AAAA,QACP;AAAA,QACD,kBAAkB;AAAA,UAGjB,qBAAqB,UAAa,OAAO,KAAK,EAAE,MAAM,WAAW,8CAAoB;AAAA,UACrF,qCAAU;AAAA,QACV;AAAA,MACL,CAAI;AAAA,IACJ,CAAG;AAGD,eAAW,KAAK;AAAiB,QAAE,MAAM,MAAM;AAAA,OAAE;AAGjD,UAAM,SAAS;AAEf,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AAC3C,UAAI,QAAQ,IAAI;AACf,YAAI;AACH,iBAAO,KAAK,MAAM,gBAAgB,EAAE;AAAA,QACpC,SAAQ,KAAP;AACD,cAAI,eAAe,UAAU;AAC5B,mBAAO;AAAA,cACN,MAAM;AAAA,cACN,UAAU,IAAI;AAAA,YACrB;AAAA,UACM;AAED,cAAI,SAAS;AAEb,cAAI;AAEJ,cAAI,uDAAmB,SAAyD,MAAO;AAGtF,sBAAyDA,UAAK,WAAL,aAAe;AACxE,oBAAwD,IAAK;AAAA,UACnE,WAAgB,eAAe,WAAW;AACpC,qBAAS,IAAI;AACb,oBAAQ,IAAI;AAAA,UAClB,OAAY;AACN,oBAAQ,aAAa,KAAK,EAAE,QAAQ,KAAK,OAAO,EAAE,IAAI,MAAM,GAAE,EAAI;AAAA,UAClE;AAED,gBAAM,aAAa,MAAM,wBAAwB,GAAG,QAAQ,MAAM;AAClE,cAAI,YAAY;AACf,mBAAO,MAAM,kCAAkC;AAAA,cAC9C;AAAA,cACA;AAAA,cACA,QAAQ,OAAO,MAAM,GAAG,WAAW,GAAG,EAAE,OAAO,WAAW,IAAI;AAAA,cAC9D;AAAA,cACA;AAAA,cACA;AAAA,YACP,CAAO;AAAA,UACP,OAAY;AAGN,mBAAO,MAAM,gBAAgB,KAAK,EAAE,IAAI,MAAM,GAAI,GAAE,OAAO,MAAM;AAAA,UACjE;AAAA,QACD;AAAA,MACL,OAAU;AAGN,eAAO,KAAK,MAAS;AAAA,MACrB;AAAA,IACD;AAED,WAAO,MAAM,kCAAkC;AAAA,MAC9C;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,OAAO;AAAA,MACP;AAAA,MAEA,MAAM,eAAe,SAAY;AAAA,IACpC,CAAG;AAAA,EACD;AAQD,iBAAe,wBAAwB,GAAG,QAAQ,QAAQ;AACzD,WAAO,KAAK;AACX,UAAI,OAAO,IAAI;AACd,YAAI,IAAI;AACR,eAAO,CAAC,OAAO;AAAI,eAAK;AACxB,YAAI;AACH,iBAAO;AAAA,YACN,KAAK,IAAI;AAAA,YACT,MAAM;AAAA,cACL,MAAM,MAAyD,OAAO,GAAK;AAAA,cAC3E,QAA2D,OAAO;AAAA,cAClE,MAAM,CAAE;AAAA,cACR,QAAQ;AAAA,cACR,QAAQ;AAAA,YACR;AAAA,UACP;AAAA,QACK,SAAQ,GAAP;AACD;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAWD,iBAAe,qBAAqB,EAAE,QAAQ,OAAO,KAAK,MAAK,GAAI;;AAElE,UAAM,SAAS;AAEf,UAAM,OAAO,MAAM;AAGnB,QAAI,mBAAmB;AAEvB,QAAI,KAAK,QAAQ;AAGhB,UAAI;AACH,cAAM,cAAc,MAAM,UAAU,KAAK,CAAC,IAAI,CAAC;AAE/C,YACC,YAAY,SAAS,UACpB,YAAY,MAAM,MAAM,YAAY,MAAM,GAAG,SAAS,QACtD;AACD,gBAAM;AAAA,QACN;AAED,4BAAmBA,kBAAY,MAAM,OAAlB,aAAwB;AAAA,MAC/C,QAAK;AAGD,YAAI,IAAI,WAAW,SAAS,UAAU,IAAI,aAAa,SAAS,YAAY,UAAU;AACrF,gBAAM,kBAAkB,GAAG;AAAA,QAC3B;AAAA,MACD;AAAA,IACD;AAED,UAAM,cAAc,MAAM,UAAU;AAAA,MACnC,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,MAAM,QAAQ,QAAQ,EAAE;AAAA,MAChC,kBAAkB,iBAAiB,gBAAgB;AAAA,IACtD,CAAG;AAGD,UAAM,aAAa;AAAA,MAClB,MAAM,MAAM,qBAAsB;AAAA,MAClC,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,IACT;AAEE,WAAO,MAAM,kCAAkC;AAAA,MAC9C;AAAA,MACA;AAAA,MACA,QAAQ,CAAC,aAAa,UAAU;AAAA,MAChC;AAAA,MACA;AAAA,MACA,OAAO;AAAA,IACV,CAAG;AAAA,EACD;AAMD,WAAS,sBAAsB,KAAK,cAAc;AACjD,QAAI,gBAAgB,GAAG;AAAG;AAE1B,UAAM,OAAO,UAAU,IAAI,SAAS,MAAM,KAAK,MAAM,KAAK,GAAG;AAE7D,eAAW,SAAS,QAAQ;AAC3B,YAAM,SAAS,MAAM,KAAK,IAAI;AAE9B,UAAI,QAAQ;AACX,cAAM,aAAa,IAAI;AAAA,UACtB,IAAI,SAAS,eAAe,IAAI,UAAU,cAAc,IAAI,IAAI,SAAS,IAAI;AAAA,QAClF;AACI,cAAM,KAAK,WAAW,WAAW,WAAW;AAE5C,cAAM,SAAS,EAAE,IAAI,cAAc,OAAO,QAAQ,cAAc,MAAM,GAAG,KAAK,WAAU;AACxF,eAAO;AAAA,MACP;AAAA,IACD;AAAA,EACD;AAGD,WAAS,gBAAgB,KAAK;AAC7B,WAAO,IAAI,WAAW,SAAS,UAAU,CAAC,IAAI,SAAS,WAAW,IAAI;AAAA,EACtE;AAUD,WAAS,gBAAgB,EAAE,KAAK,MAAM,QAAQ,MAAK,GAAI;;AACtD,QAAI,eAAe;AAGnB,UAAM,aAAa;AAAA,MAClB,MAAM,mBAAmB,QAAQ;AAAA,QAChC,QAAQ,QAAQ;AAAA,QAChB,OAAO,EAAE,KAAI,oBAAQ,UAAR,oBAAe,OAAf,YAAqB,KAAM;AAAA,QACxC,KAAK,QAAQ;AAAA,MACjB,CAAI;AAAA,MACD,IAAI,mBAAmB,MAAM;AAAA,QAC5B,SAAQ,sCAAQ,WAAR,YAAkB;AAAA,QAC1B,OAAO,EAAE,KAAI,4CAAQ,UAAR,mBAAe,OAAf,YAAqB,KAAM;AAAA,QACxC;AAAA,MACJ,CAAI;AAAA,MACD,YAAY,CAAC;AAAA,MACb;AAAA,IACH;AAEE,QAAI,UAAU,QAAW;AACxB,iBAAW,QAAQ;AAAA,IACnB;AAED,UAAM,cAAc;AAAA,MACnB,GAAG;AAAA,MACH,QAAQ,MAAM;AACb,uBAAe;AAAA,MACf;AAAA,IACJ;AAEE,cAAU,gBAAgB,QAAQ,CAAC,OAAO,GAAG,WAAW,CAAC;AAEzD,WAAO,eAAe,OAAO;AAAA,EAC7B;AAmBD,iBAAe,SAAS;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAI;AACF,UAAM,SAAS,sBAAsB,KAAK,KAAK;AAC/C,UAAM,aAAa,gBAAgB,EAAE,KAAK,MAAM,OAAO,OAAM,CAAE;AAE/D,QAAI,CAAC,YAAY;AAChB;AACA;AAAA,IACA;AAED,4BAAwB,qBAAqB;AAE7C;AAEA,iBAAa;AAEb,QAAI,SAAS;AACZ,aAAO,WAAW,IAAI,UAAU;AAAA,IAChC;AAED,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,MACA;AAAA,MACD;AAAA,MACA,MAAM;AACL,qBAAa;AACb,kBAAU,eAAe;AAAA,UAAQ,CAAC,OACjC,GAAiD,UAAY;AAAA,QAClE;AACI,eAAO,WAAW,IAAI,IAAI;AAAA,MAC1B;AAAA,IACJ;AAAA,EACE;AAUD,iBAAe,gBAAgB,KAAK,OAAO,OAAO,QAAQ;AACzD,QAAI,IAAI,WAAW,SAAS,UAAU,IAAI,aAAa,SAAS,YAAY,CAAC,UAAU;AAGtF,aAAO,MAAM,qBAAqB;AAAA,QACjC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAI;AAAA,IACD;AACD,WAAO,MAAM,kBAAkB,GAAG;AAAA,EAClC;AAQD,WAAS,kBAAkB,KAAK;AAC/B,aAAS,OAAO,IAAI;AACpB,WAAO,IAAI,QAAQ,MAAM;AAAA,KAAE;AAAA,EAC3B;AAQD,SAAO;AAAA,IACN,gBAAgB,CAAC,OAAO;AACvB,cAAQ,MAAM;AACb,kBAAU,eAAe,KAAK,EAAE;AAEhC,eAAO,MAAM;AACZ,gBAAM,IAAI,UAAU,eAAe,QAAQ,EAAE;AAC7C,oBAAU,eAAe,OAAO,GAAG,CAAC;AAAA,QACzC;AAAA,MACA,CAAI;AAAA,IACD;AAAA,IAED,iBAAiB,CAAC,OAAO;AACxB,cAAQ,MAAM;AACb,kBAAU,gBAAgB,KAAK,EAAE;AAEjC,eAAO,MAAM;AACZ,gBAAM,IAAI,UAAU,gBAAgB,QAAQ,EAAE;AAC9C,oBAAU,gBAAgB,OAAO,GAAG,CAAC;AAAA,QAC1C;AAAA,MACA,CAAI;AAAA,IACD;AAAA,IAED,yBAAyB,MAAM;AAK9B,UAAI,YAAY,CAAC,SAAS;AACzB,qBAAa;AAAA,MACb;AAAA,IACD;AAAA,IAED,MAAM,CAAC,MAAM,OAAO,OAAO;AAE1B,UAAI,eAAe,MAAM;AACxB,cAAM,IAAI;AAAA,UACT;AAAA,QACL;AAAA,MACI;AAED,UAAI,cAAc,MAAM;AACvB,cAAM,IAAI;AAAA,UACT;AAAA,QACL;AAAA,MACI;AAED,aAAO,KAAK,MAAM,MAAM,CAAE;AAAA,IAC1B;AAAA,IAED,YAAY,CAAC,aAAa;AACzB,UAAI,aAAa,QAAW;AAE3B,cAAM,IAAI;AAAA,UACT;AAAA,QACL;AAAA,MACI;AAED,UAAI,OAAO,aAAa,YAAY;AACnC,oBAAY,KAAK,QAAQ;AAAA,MAC7B,OAAU;AACN,cAAM,EAAE,KAAI,IAAK,IAAI,IAAI,UAAU,SAAS,IAAI;AAChD,oBAAY,KAAK,CAAC,QAAQ,IAAI,SAAS,IAAI;AAAA,MAC3C;AAED,aAAO,WAAU;AAAA,IACjB;AAAA,IAED,eAAe,MAAM;AACpB,2BAAqB;AACrB,aAAO,WAAU;AAAA,IACjB;AAAA,IAED,UAAU,OAAO,SAAS;AACzB,YAAM,MAAM,IAAI,IAAI,MAAM,aAAa,QAAQ,CAAC;AAChD,YAAM,SAAS,GAAG;AAAA,IAClB;AAAA,IAGD,iBAAiB,OAAO,cAAc;AACrC,YAAM,WAAW,YACd,OAAO,OAAO,CAAC,UAAU,UAAU,KAAK,CAAC,aAAa,MAAM,KAAK,QAAQ,CAAC,CAAC,IAC3E;AAEH,YAAM,WAAW,SAAS,IAAI,CAAC,MAAM;AACpC,eAAO,QAAQ,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,6BAAO,IAAI,CAAC;AAAA,MACxE,CAAI;AAED,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC1B;AAAA,IAED,cAAc,OAAO,WAAW;AAC/B,UAAI,OAAO,SAAS,SAAS;AAC5B,cAAM,MAAM,IAAI,IAAI,SAAS,IAAI;AAEjC,cAAM,EAAE,QAAQ,MAAO,IAAG;AAC1B,YAAI,CAAC;AAAO;AAEZ,cAAM,aAAa,MAAM;AAAA,UACxB,QAAQ,OAAO;AAAA,UACf;AAAA,UACA,MAAM;AAAA,QACX;AACI,YAAI,YAAY;AACf,gBAAM,oBAAoB,MAAM,kCAAkC;AAAA,YACjE;AAAA,YACA,QAAQ,QAAQ;AAAA,YAChB,QAAQ,OAAO,MAAM,GAAG,WAAW,GAAG,EAAE,OAAO,WAAW,IAAI;AAAA,YAC9D,QAAQ;AAAA,YACR,OAAO,OAAO;AAAA,YACd;AAAA,UACN,CAAM;AAED,oBAAU,kBAAkB;AAE5B,gBAAM,cAAc;AACpB,eAAK,KAAK,kBAAkB,KAAK;AACjC;QACA;AAAA,MACL,WAAc,OAAO,SAAS,YAAY;AACtC,aAAK,OAAO,UAAU,EAAE,eAAe,KAAI,GAAI,EAAE;AAAA,MACrD,OAAU;AAEN,cAAM,QAAQ;AAAA,UACb,MAAM,OAAO;AAAA,UACb,MAAM,EAAE,GAAG,MAAM,MAAM,OAAO,MAAM,QAAQ,OAAO,OAAQ;AAAA,QAChE;AACI,cAAM,cAAc;AACpB,aAAK,KAAK,KAAK;AACf;MACA;AAAA,IACD;AAAA,IAED,eAAe,MAAM;AACpB,cAAQ,oBAAoB;AAM5B,uBAAiB,gBAAgB,CAAC,MAAM;;AACvC,YAAI,eAAe;AAEnB,YAAI,CAAC,YAAY;AAIhB,gBAAM,aAAa;AAAA,YAClB,MAAM,mBAAmB,QAAQ;AAAA,cAChC,QAAQ,QAAQ;AAAA,cAChB,OAAO,EAAE,KAAI,oBAAQ,UAAR,oBAAe,OAAf,YAAqB,KAAM;AAAA,cACxC,KAAK,QAAQ;AAAA,YACpB,CAAO;AAAA,YACD,IAAI;AAAA,YACJ,YAAY;AAAA,YACZ,MAAM;AAAA,YACN,QAAQ,MAAO,eAAe;AAAA,UACpC;AAEK,oBAAU,gBAAgB,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAC;AAAA,QACxD;AAED,YAAI,cAAc;AACjB,YAAE,eAAc;AAChB,YAAE,cAAc;AAAA,QACrB,OAAW;AACN,kBAAQ,oBAAoB;AAAA,QAC5B;AAAA,MACL,CAAI;AAED,uBAAiB,oBAAoB,MAAM;AAC1C,YAAI,SAAS,oBAAoB,UAAU;AAC1C,kCAAwB,qBAAqB;AAE7C,cAAI;AACH,2BAAe,cAAc,KAAK,UAAU,gBAAgB;AAAA,UAClE,QAAO;AAAA,UAED;AAAA,QACD;AAAA,MACL,CAAI;AAGD,YAAM,mBAAmB,CAAC,UAAU;AACnC,cAAM,EAAE,KAAK,QAAS,IAAG,YAAY,KAAK;AAC1C,YAAI,OAAO,QAAQ,UAAU;AAC5B,cAAI,gBAAgB,GAAG;AAAG;AAC1B,mBAAS,GAAG;AAAA,QACZ;AAAA,MACL;AAGG,UAAI;AAGJ,YAAM,mBAAmB,CAAC,UAAU;AACnC,qBAAa,iBAAiB;AAC9B,4BAAoB,WAAW,MAAM;;AAGpC,uBAAM,WAAN,oBAAc;AAAA,YACb,IAAI,YAAY,8BAA8B,EAAE,SAAS,KAAI,CAAE;AAAA;AAAA,QAEhE,GAAE,EAAE;AAAA,MACT;AAEG,uBAAiB,cAAc,gBAAgB;AAC/C,uBAAiB,aAAa,gBAAgB;AAC9C,uBAAiB,8BAA8B,gBAAgB;AAG/D,uBAAiB,SAAS,CAAC,UAAU;AAGpC,YAAI,MAAM,UAAU,MAAM,UAAU;AAAG;AACvC,YAAI,MAAM,WAAW,MAAM,WAAW,MAAM,YAAY,MAAM;AAAQ;AACtE,YAAI,MAAM;AAAkB;AAE5B,cAAM,EAAE,GAAG,KAAK,QAAO,IAAK,YAAY,KAAK;AAC7C,YAAI,CAAC,KAAK,CAAC;AAAK;AAEhB,cAAM,mBAAmB,aAAa;AAUtC,YACC,CAAC,oBACD,IAAI,aAAa,SAAS,YAC1B,EAAE,IAAI,aAAa,YAAY,IAAI,aAAa;AAEhD;AAED,YAAI,EAAE,aAAa,UAAU;AAAG;AAGhC,cAAM,OAAO,EAAE,aAAa,KAAK,KAAK,IAAI,MAAM,KAAK;AACrD,YACC,IAAI,SAAS,UAAU,KACvB,QAAQ,WACP,mBAAmB,EAAE,OAAO,UAAU,EAAE,SACxC;AACD,gBAAM,aAAa,gBAAgB,EAAE,KAAK,MAAM,OAAM,CAAE;AACxD,cAAI,CAAC,YAAY;AAChB,kBAAM,eAAc;AAAA,UACpB;AACD,uBAAa;AACb;AAAA,QACA;AAKD,cAAM,CAACE,OAAMf,KAAI,IAAI,IAAI,KAAK,MAAM,GAAG;AACvC,YAAIA,UAAS,UAAae,UAAS,SAAS,KAAK,MAAM,GAAG,EAAE,IAAI;AAI/D,4BAAkB;AAElB,kCAAwB,qBAAqB;AAE7C,kBAAQ,MAAM;AACd,iBAAO,KAAK,IAAI,EAAE,GAAG,MAAM,IAAG,CAAE;AAChC,iBAAO,KAAK;AAEZ;AAAA,QACA;AAED,iBAAS;AAAA,UACR;AAAA,UACA,QAAQ,QAAQ,WAAW,aAAc,IAAG;AAAA,UAC5C,WAAW;AAAA,UACX,gBAAgB,CAAE;AAAA,UAClB,SAAS;AAAA,YACR,OAAO,CAAE;AAAA,YACT,cAAc,IAAI,SAAS,SAAS;AAAA,UACpC;AAAA,UACD,UAAU,MAAM,MAAM,eAAgB;AAAA,UACtC,SAAS,MAAM,MAAM,eAAgB;AAAA,UACrC,MAAM;AAAA,QACX,CAAK;AAAA,MACL,CAAI;AAED,uBAAiB,YAAY,CAAC,UAAU;AACvC,YAAI,MAAM,OAAO;AAGhB,cAAI,MAAM,MAAM,eAAe;AAAuB;AAEtD,gBAAM,QAAQ,MAAM,MAAM,aAAa;AAEvC,mBAAS;AAAA,YACR,KAAK,IAAI,IAAI,SAAS,IAAI;AAAA,YAC1B,QAAQ,iBAAiB,MAAM,MAAM;AAAA,YACrC,WAAW;AAAA,YACX,gBAAgB,CAAE;AAAA,YAClB,SAAS;AAAA,YACT,UAAU,MAAM;AACf,sCAAwB,MAAM,MAAM;AAAA,YACpC;AAAA,YACD,SAAS,MAAM;AACd,sBAAQ,GAAG,CAAC,KAAK;AAAA,YACjB;AAAA,YACD,MAAM;AAAA,YACN;AAAA,UACN,CAAM;AAAA,QACD;AAAA,MACL,CAAI;AAED,uBAAiB,cAAc,MAAM;AAGpC,YAAI,iBAAiB;AACpB,4BAAkB;AAClB,kBAAQ;AAAA,YACP,EAAE,GAAG,QAAQ,OAAO,CAAC,YAAY,EAAE,sBAAuB;AAAA,YAC1D;AAAA,YACA,SAAS;AAAA,UACf;AAAA,QACK;AAAA,MACL,CAAI;AAKD,iBAAW,QAAQ,SAAS,iBAAiB,MAAM,GAAG;AACrD,YAAI,KAAK,QAAQ;AAAQ,eAAK,OAAO,KAAK;AAAA,MAC1C;AAED,uBAAiB,YAAY,CAAC,UAAU;AAKvC,YAAI,MAAM,WAAW;AACpB,iBAAO,WAAW,IAAI,IAAI;AAAA,QAC1B;AAAA,MACL,CAAI;AAAA,IACD;AAAA,IAED,UAAU,OAAO,EAAE,QAAQ,OAAO,UAAU,QAAQ,OAAO,MAAM,mBAAmB,WAAW;;AAC9F,iBAAW;AAEX,YAAM,MAAM,IAAI,IAAI,SAAS,IAAI;AAGjC,UAAI;AAEJ,UAAI;AACH,cAAM,kBAAkB,SAAS,IAAI,OAAO,GAAG,MAAM;AACpD,gBAAM,mBAAmB,kBAAkB;AAE3C,iBAAO,UAAU;AAAA,YAChB,QAAQ,MAAM;AAAA,YACd;AAAA,YACA;AAAA,YACA;AAAA,YACA,QAAQ,YAAY;AACnB,oBAAM,OAAO;AACb,uBAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC9B,uBAAO,OAAO,OAAO,MAAM,gBAAgB,IAAI,IAAI;AAAA,cACnD;AACD,qBAAO;AAAA,YACP;AAAA,YACD,kBAAkB,iBAAiB,gBAAgB;AAAA,UACzD,CAAM;AAAA,QACN,CAAK;AAED,iBAAS,MAAM,kCAAkC;AAAA,UAChD;AAAA,UACA;AAAA,UACA,QAAQ,MAAM,QAAQ,IAAI,eAAe;AAAA,UACzC;AAAA,UACA;AAAA,UACA;AAAA,UACA,QAAOF,aAAO,KAAK,CAAC,EAAE,GAAI,MAAK,OAAO,MAAM,EAAE,MAAvC,aAA4C;AAAA,QACxD,CAAK;AAAA,MACD,SAAQG,QAAP;AACD,YAAIA,kBAAiB,UAAU;AAG9B,gBAAM,kBAAkB,IAAI,IAAIA,OAAM,UAAU,SAAS,IAAI,CAAC;AAC9D;AAAA,QACA;AAED,iBAAS,MAAM,qBAAqB;AAAA,UACnC,QAAQA,kBAAiB,YAAYA,OAAM,SAAS;AAAA,UACpD,OAAO,aAAaA,QAAO,EAAE,KAAK,QAAQ,OAAO;AAAA,UACjD;AAAA,UACA;AAAA,QACL,CAAK;AAAA,MACD;AAED,iBAAW,MAAM;AAAA,IACjB;AAAA,EACH;AACA;AAOA,eAAe,UAAU,KAAK,SAAS;;AACtC,QAAM,WAAW,IAAI,IAAI,GAAG;AAC5B,WAAS,WAAW,gBAAgB,IAAI,QAAQ;AAEhD,QAAM,MAAM,MAAM,aAAa,SAAS,MAAM;AAAA,IAC7C,SAAS;AAAA,MACR,2BAA2B,QAAQ,IAAI,CAAC,MAAO,IAAI,MAAM,EAAG,EAAE,KAAK,GAAG;AAAA,IACtE;AAAA,EACH,CAAE;AACD,QAAM,OAAO,MAAM,IAAI;AAEvB,MAAI,CAAC,IAAI,IAAI;AAEZ,UAAM,IAAI,MAAM,IAAI;AAAA,EACpB;AAGD,aAAK,UAAL,mBAAY,QAAQ,CAAoB,SAAS;;AAChD,SAAI,6BAAM,UAAS,QAAQ;AAC1B,WAAK,OAAOC,UAAkB,KAAK,IAAI;AACvC,WAAK,OAAO;AAAA,QACX,cAAc,IAAI,KAAIJ,WAAK,KAAK,iBAAV,aAA0B,EAAE;AAAA,QAClD,QAAQ,IAAI,KAAI,UAAK,KAAK,WAAV,YAAoB,EAAE;AAAA,QACtC,QAAQ,CAAC,CAAC,KAAK,KAAK;AAAA,QACpB,OAAO,CAAC,CAAC,KAAK,KAAK;AAAA,QACnB,KAAK,CAAC,CAAC,KAAK,KAAK;AAAA,MACrB;AAAA,IACG;AAAA,EACH;AAEC,SAAO;AACR;AAOA,SAAS,aAAa,OAAO,OAAO;;AACnC,MAAI,iBAAiB,WAAW;AAC/B,WAAO,MAAM;AAAA,EACb;AACD,UACC,WAAM,YAAY,EAAE,OAAO,MAAK,CAAE,MAAlC,YACoB,EAAE,SAAS,MAAM,MAAM,MAAM,OAAO,mBAAmB;AAE7E;AAGA,MAAM,aAAa;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;AAMA,SAAS,mBAAmB,MAAM,QAAQ;AACzC,aAAW,QAAQ,YAAY;AAC9B,WAAO,eAAe,QAAQ,MAAM;AAAA,MACnC,MAAM;AACL,cAAM,IAAI;AAAA,UACT,kCAAkC,QAAQ,sBAAsB,YAAY;AAAA,QACjF;AAAA,MACI;AAAA,MACD,YAAY;AAAA,IACf,CAAG;AAAA,EACD;AAED,SAAO,eAAe,QAAQ,WAAW;AAAA,IACxC,MAAM;AACL,YAAM,IAAI;AAAA,QACT,kCAAkC,8BAA8B;AAAA,MACpE;AAAA,IACG;AAAA,IACD,YAAY;AAAA,EACd,CAAE;AAED,SAAO;AACR;AAEA,SAAS,aAAa;AAOrB,SAAO,MAAM;AAAA;AACd;ACznDO,eAAe,MAAM,EAAE,KAAK,SAAS,OAAO,QAAQ,kBAAkB;AAE5E,YAAU,KAAK;AAEf,QAAM,SAAS,cAAc;AAAA,IAC5B;AAAA,IACA,MAAM,MAAM;AAAA,IACZ;AAAA,EACF,CAAE;AAEDZ,SAAK,EAAE,OAAM,CAAE;AAEf,MAAI,SAAS;AACZ,UAAM,OAAO,SAAS,OAAO;AAAA,EAC/B,OAAQ;AACN,WAAO,KAAK,SAAS,MAAM,EAAE,cAAc,KAAI,CAAE;AAAA,EACjD;AAED,SAAO,cAAa;AACrB","names":["hash","init","i","matchers","nodes","server_loads","dictionary","ctx","stores","location","key","root","scroll","_a","target","base","error","devalue.unflatten"],"sources":["../../../../../node_modules/@sveltejs/kit/src/utils/url.js","../../../../../node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../generated/root.svelte","../../../../generated/client-matchers.js","../../../../generated/client-manifest.js","../../../../../node_modules/@sveltejs/kit/src/runtime/control.js","../../../../../node_modules/@sveltejs/kit/src/utils/promises.js","../../../../../node_modules/devalue/src/utils.js","../../../../../node_modules/devalue/src/uneval.js","../../../../../node_modules/devalue/src/constants.js","../../../../../node_modules/devalue/src/parse.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/client.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/start.js"],"sourcesContent":["const absolute = /^([a-z]+:)?\\/?\\//;\nconst scheme = /^[a-z]+:/;\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\tif (scheme.test(path)) return path;\n\tif (path[0] === '#') return base + path;\n\n\tconst base_match = absolute.exec(base);\n\tconst path_match = absolute.exec(path);\n\n\tif (!base_match) {\n\t\tthrow new Error(`bad base path: \"${base}\"`);\n\t}\n\n\tconst baseparts = path_match ? [] : base.slice(base_match[0].length).split('/');\n\tconst pathparts = path_match ? path.slice(path_match[0].length).split('/') : path.split('/');\n\n\tbaseparts.pop();\n\n\tfor (let i = 0; i < pathparts.length; i += 1) {\n\t\tconst part = pathparts[i];\n\t\tif (part === '.') continue;\n\t\telse if (part === '..') baseparts.pop();\n\t\telse baseparts.push(part);\n\t}\n\n\tconst prefix = (path_match && path_match[0]) || (base_match && base_match[0]) || '';\n\n\treturn `${prefix}${baseparts.join('/')}`;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest that decodeURIComponent would do\n\t\tparams[key] = params[key]\n\t\t\t.replace(/%23/g, '#')\n\t\t\t.replace(/%3[Bb]/g, ';')\n\t\t\t.replace(/%2[Cc]/g, ',')\n\t\t\t.replace(/%2[Ff]/g, '/')\n\t\t\t.replace(/%3[Ff]/g, '?')\n\t\t\t.replace(/%3[Aa]/g, ':')\n\t\t\t.replace(/%40/g, '@')\n\t\t\t.replace(/%26/g, '&')\n\t\t\t.replace(/%3[Dd]/g, '=')\n\t\t\t.replace(/%2[Bb]/g, '+')\n\t\t\t.replace(/%24/g, '$');\n\t}\n\n\treturn params;\n}\n\n/**\n * URL properties that could change during the lifetime of the page,\n * which excludes things like `origin`\n * @type {Array<keyof URL>}\n */\nconst tracked_url_properties = ['href', 'pathname', 'search', 'searchParams', 'toString', 'toJSON'];\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n */\nexport function make_trackable(url, callback) {\n\tconst tracked = new URL(url);\n\n\tfor (const property of tracked_url_properties) {\n\t\tlet value = tracked[property];\n\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\treturn value;\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!__SVELTEKIT_BROWSER__) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\t}\n\n\tdisable_hash(tracked);\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nexport function disable_hash(url) {\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst DATA_SUFFIX = '/__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody} value\n */\nexport function hash(value) {\n\tlet hash = 5381;\n\n\tif (typeof value === 'string') {\n\t\tlet i = value.length;\n\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t} else if (ArrayBuffer.isView(value)) {\n\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\tlet i = buffer.length;\n\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t} else {\n\t\tthrow new TypeError('value must be a string or TypedArray');\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","import { hash } from '../hash.js';\n\nlet loading = 0;\n\nexport const native_fetch = window.fetch;\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (import.meta.env.DEV) {\n\tlet can_inspect_stack_trace = false;\n\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tcheck_stack_trace();\n\n\twindow.fetch = (input, init) => {\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\n\t\tconst heuristic = can_inspect_stack_trace ? stack.includes('load_node') : loading;\n\t\tif (heuristic) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://kit.svelte.dev/docs/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tconst url = new URL(input instanceof Request ? input.url : input.toString(), document.baseURI)\n\t\t\t\t.href;\n\t\t\tcache.delete(url);\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tconst url = new URL(input instanceof Request ? input.url : input.toString(), document.baseURI)\n\t\t\t\t.href;\n\t\t\tcache.delete(url);\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {RequestInfo | URL} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, resolved, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\tselector += `[data-hash=\"${hash(opts.body)}\"]`;\n\t}\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tconst { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(resolved, { body, init, ttl: 1000 * Number(ttl) });\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn native_fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resolved, opts) {\n\tconst cached = cache.get(resolved);\n\tif (cached) {\n\t\tif (performance.now() < cached.ttl) {\n\t\t\treturn new Response(cached.body, cached.init);\n\t\t}\n\n\t\tcache.delete(resolved);\n\t}\n\n\treturn native_fetch(resolved, opts);\n}\n","const param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/** @param {string} id */\nexport function parse_route_id(id) {\n\t/** @type {string[]} */\n\tconst names = [];\n\n\t/** @type {string[]} */\n\tconst types = [];\n\n\t/** @type {boolean[]} */\n\tconst optional = [];\n\n\t// `/foo` should get an optional trailing slash, `/foo.json` should not\n\t// const add_trailing_slash = !/\\.[a-z]+$/.test(key);\n\tlet add_trailing_slash = true;\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment, i, segments) => {\n\t\t\t\t\t\t\tconst decoded_segment = decodeURIComponent(segment);\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(decoded_segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tnames.push(rest_match[1]);\n\t\t\t\t\t\t\t\ttypes.push(rest_match[2]);\n\t\t\t\t\t\t\t\toptional.push(false);\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case — /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(decoded_segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tnames.push(optional_match[1]);\n\t\t\t\t\t\t\t\ttypes.push(optional_match[2]);\n\t\t\t\t\t\t\t\toptional.push(true);\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst is_last = i === segments.length - 1;\n\n\t\t\t\t\t\t\tif (!decoded_segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = decoded_segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tconst match = param_pattern.exec(content);\n\t\t\t\t\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, type] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tnames.push(name);\n\t\t\t\t\t\t\t\t\t\ttypes.push(type);\n\t\t\t\t\t\t\t\t\t\toptional.push(!!is_optional);\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (is_last && content.includes('.')) add_trailing_slash = false;\n\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\tcontent // allow users to specify characters on the file system in an encoded manner\n\t\t\t\t\t\t\t\t\t\t\t.normalize()\n\t\t\t\t\t\t\t\t\t\t\t// We use [ and ] to denote parameters, so users must encode these on the file\n\t\t\t\t\t\t\t\t\t\t\t// system to match against them. We don't decode all characters since others\n\t\t\t\t\t\t\t\t\t\t\t// can already be epressed and so that '%' can be easily used directly in filenames\n\t\t\t\t\t\t\t\t\t\t\t.replace(/%5[Bb]/g, '[')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/%5[Dd]/g, ']')\n\t\t\t\t\t\t\t\t\t\t\t// '#', '/', and '?' can only appear in URL path segments in an encoded manner.\n\t\t\t\t\t\t\t\t\t\t\t// They will not be touched by decodeURI so need to be encoded here, so\n\t\t\t\t\t\t\t\t\t\t\t// that we can match against them.\n\t\t\t\t\t\t\t\t\t\t\t// We skip '/' since you can't create a file with it on any OS\n\t\t\t\t\t\t\t\t\t\t\t.replace(/#/g, '%23')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/\\?/g, '%3F')\n\t\t\t\t\t\t\t\t\t\t\t// escape characters that have special meaning in regex\n\t\t\t\t\t\t\t\t\t\t\t.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n\t\t\t\t\t\t\t\t\t); // TODO handle encoding\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}${add_trailing_slash ? '/?' : ''}$`\n\t\t\t  );\n\n\treturn { pattern, names, types, optional };\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {{\n *   names: string[];\n *   types: string[];\n *   optional: boolean[];\n * }} candidate\n * @param {Record<string, import('types').ParamMatcher>} matchers\n */\nexport function exec(match, { names, types, optional }, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst params = {};\n\n\tfor (let i = 0; i < names.length; i += 1) {\n\t\tconst name = names[i];\n\t\tconst type = types[i];\n\t\tlet value = match[i + 1];\n\n\t\tif (value || !optional[i]) {\n\t\t\tif (type) {\n\t\t\t\tconst matcher = matchers[type];\n\t\t\t\tif (!matcher) throw new Error(`Missing \"${type}\" param matcher`); // TODO do this ahead of time?\n\n\t\t\t\tif (!matcher(value)) return;\n\t\t\t}\n\n\t\t\tparams[name] = value ?? '';\n\t\t}\n\t}\n\n\treturn params;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('types').CSRPageNodeLoader[]} nodes\n * @param {number[]} server_loads\n * @param {typeof import('__GENERATED__/client-manifest.js').dictionary} dictionary\n * @param {Record<string, (param: string) => boolean>} matchers\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse(nodes, server_loads, dictionary, matchers) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, names, types, optional } = parse_route_id(id);\n\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, { names, types, optional }, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n","<!-- This file is generated by @sveltejs/kit — do not edit it! -->\n<script>\n\timport { setContext, afterUpdate, onMount } from 'svelte';\n\timport { browser } from '$app/environment';\n\n\t// stores\n\texport let stores;\n\texport let page;\n\n\texport let components;\n\texport let form;\n\texport let data_0 = null;\n\texport let data_1 = null;\n\n\tif (!browser) {\n\t\tsetContext('__svelte__', stores);\n\t}\n\n\t$: stores.page.set(page);\n\tafterUpdate(stores.page.notify);\n\n\tlet mounted = false;\n\tlet navigated = false;\n\tlet title = null;\n\n\tonMount(() => {\n\t\tconst unsubscribe = stores.page.subscribe(() => {\n\t\t\tif (mounted) {\n\t\t\t\tnavigated = true;\n\t\t\t\ttitle = document.title || 'untitled page';\n\t\t\t}\n\t\t});\n\n\t\tmounted = true;\n\t\treturn unsubscribe;\n\t});\n</script>\n\n{#if components[1]}\n\t<svelte:component this={components[0]} data={data_0}>\n\t\t<svelte:component this={components[1]} data={data_1} {form} />\n\t</svelte:component>\n{:else}\n\t<svelte:component this={components[0]} data={data_0} {form} />\n{/if}\n\n{#if mounted}\n\t<div id=\"svelte-announcer\" aria-live=\"assertive\" aria-atomic=\"true\" style=\"position: absolute; left: 0; top: 0; clip: rect(0 0 0 0); clip-path: inset(50%); overflow: hidden; white-space: nowrap; width: 1px; height: 1px\">\n\t\t{#if navigated}\n\t\t\t{title}\n\t\t{/if}\n\t</div>\n{/if}","export const matchers = {};","export { matchers } from './client-matchers.js';\n\n\t\t\texport const nodes = [() => import('./nodes/0'),\n\t() => import('./nodes/1'),\n\t() => import('./nodes/2')];\n\n\t\t\texport const server_loads = [];\n\n\t\t\texport const dictionary = {\n\t\"/\": [2]\n};\n\n\t\t\texport const hooks = {\n\t\t\t\thandleError: (({ error }) => { console.error(error) }),\n\t\t\t};","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {number} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ValidationError {\n\t/**\n\t * @param {number} status\n\t * @param {T} [data]\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\n/**\n * Creates an `HttpError` object with an HTTP status code and an optional message.\n * This object, if thrown during request handling, will cause SvelteKit to\n * return an error response without invoking `handleError`\n * @param {number} status\n * @param {string | undefined} [message]\n */\nexport function error(status, message) {\n\treturn new HttpError(status, message);\n}\n\n/**\n * Creates a `Redirect` object. If thrown during request handling, SvelteKit will\n * return a redirect response.\n * @param {number} status\n * @param {string} location\n */\nexport function redirect(status, location) {\n\tif (isNaN(status) || status < 300 || status > 399) {\n\t\tthrow new Error('Invalid status code');\n\t}\n\n\treturn new Redirect(status, location);\n}\n\n/**\n * Generates a JSON `Response` object from the supplied data.\n * @param {any} data\n * @param {ResponseInit} [init]\n */\nexport function json(data, init) {\n\t// TODO deprecate this in favour of `Response.json` when it's\n\t// more widely supported\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-type')) {\n\t\theaders.set('content-type', 'application/json');\n\t}\n\n\treturn new Response(JSON.stringify(data), {\n\t\t...init,\n\t\theaders\n\t});\n}\n\n/**\n * Generates a `ValidationError` object.\n * @param {number} status\n * @param {Record<string, any> | undefined} [data]\n */\nexport function invalid(status, data) {\n\treturn new ValidationError(status, data);\n}\n","/**\n * Given an object, return a new object where all top level values are awaited\n *\n * @param {Record<string, any>} object\n * @returns {Promise<Record<string, any>>}\n */\nexport async function unwrap_promises(object) {\n\tfor (const key in object) {\n\t\tif (typeof object[key]?.then === 'function') {\n\t\t\treturn Object.fromEntries(\n\t\t\t\tawait Promise.all(Object.entries(object).map(async ([key, value]) => [key, await value]))\n\t\t\t);\n\t\t}\n\t}\n\n\treturn object;\n}\n","/** @type {Record<string, string>} */\nexport const escaped = {\n\t'<': '\\\\u003C',\n\t'>': '\\\\u003E',\n\t'/': '\\\\u002F',\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t',\n\t'\\0': '\\\\u0000',\n\t'\\u2028': '\\\\u2028',\n\t'\\u2029': '\\\\u2029'\n};\n\nexport class DevalueError extends Error {\n\t/**\n\t * @param {string} message\n\t * @param {string[]} keys\n\t */\n\tconstructor(message, keys) {\n\t\tsuper(message);\n\t\tthis.name = 'DevalueError';\n\t\tthis.path = keys.join('');\n\t}\n}\n\n/** @param {any} thing */\nexport function is_primitive(thing) {\n\treturn Object(thing) !== thing;\n}\n\nconst object_proto_names = Object.getOwnPropertyNames(Object.prototype)\n\t.sort()\n\t.join('\\0');\n\n/** @param {any} thing */\nexport function is_plain_object(thing) {\n\tconst proto = Object.getPrototypeOf(thing);\n\n\treturn (\n\t\tproto === Object.prototype ||\n\t\tproto === null ||\n\t\tObject.getOwnPropertyNames(proto).sort().join('\\0') === object_proto_names\n\t);\n}\n\n/** @param {any} thing */\nexport function get_type(thing) {\n\treturn Object.prototype.toString.call(thing).slice(8, -1);\n}\n\n/** @param {string} str */\nexport function stringify_string(str) {\n\tlet result = '\"';\n\n\tfor (let i = 0; i < str.length; i += 1) {\n\t\tconst char = str.charAt(i);\n\t\tconst code = char.charCodeAt(0);\n\n\t\tif (char === '\"') {\n\t\t\tresult += '\\\\\"';\n\t\t} else if (char in escaped) {\n\t\t\tresult += escaped[char];\n\t\t} else if (code >= 0xd800 && code <= 0xdfff) {\n\t\t\tconst next = str.charCodeAt(i + 1);\n\n\t\t\t// If this is the beginning of a [high, low] surrogate pair,\n\t\t\t// add the next two characters, otherwise escape\n\t\t\tif (code <= 0xdbff && next >= 0xdc00 && next <= 0xdfff) {\n\t\t\t\tresult += char + str[++i];\n\t\t\t} else {\n\t\t\t\tresult += `\\\\u${code.toString(16).toUpperCase()}`;\n\t\t\t}\n\t\t} else {\n\t\t\tresult += char;\n\t\t}\n\t}\n\n\tresult += '\"';\n\treturn result;\n}\n","import {\n\tDevalueError,\n\tescaped,\n\tget_type,\n\tis_primitive,\n\tstringify_string\n} from './utils.js';\n\nconst chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';\nconst unsafe_chars = /[<>\\b\\f\\n\\r\\t\\0\\u2028\\u2029]/g;\nconst reserved =\n\t/^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;\nconst object_proto_names = Object.getOwnPropertyNames(Object.prototype)\n\t.sort()\n\t.join('\\0');\n\n/**\n * Turn a value into the JavaScript that creates an equivalent value\n * @param {any} value\n */\nexport function uneval(value) {\n\tconst counts = new Map();\n\n\t/** @type {string[]} */\n\tconst keys = [];\n\n\t/** @param {any} thing */\n\tfunction walk(thing) {\n\t\tif (typeof thing === 'function') {\n\t\t\tthrow new DevalueError(`Cannot stringify a function`, keys);\n\t\t}\n\n\t\tif (!is_primitive(thing)) {\n\t\t\tif (counts.has(thing)) {\n\t\t\t\tcounts.set(thing, counts.get(thing) + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcounts.set(thing, 1);\n\n\t\t\tconst type = get_type(thing);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'BigInt':\n\t\t\t\tcase 'String':\n\t\t\t\tcase 'Boolean':\n\t\t\t\tcase 'Date':\n\t\t\t\tcase 'RegExp':\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\t/** @type {any[]} */ (thing).forEach((value, i) => {\n\t\t\t\t\t\tkeys.push(`[${i}]`);\n\t\t\t\t\t\twalk(value);\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Set':\n\t\t\t\t\tArray.from(thing).forEach(walk);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Map':\n\t\t\t\t\tfor (const [key, value] of thing) {\n\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t`.get(${is_primitive(key) ? stringify_primitive(key) : '...'})`\n\t\t\t\t\t\t);\n\t\t\t\t\t\twalk(value);\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconst proto = Object.getPrototypeOf(thing);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tproto !== Object.prototype &&\n\t\t\t\t\t\tproto !== null &&\n\t\t\t\t\t\tObject.getOwnPropertyNames(proto).sort().join('\\0') !==\n\t\t\t\t\t\t\tobject_proto_names\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow new DevalueError(\n\t\t\t\t\t\t\t`Cannot stringify arbitrary non-POJOs`,\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Object.getOwnPropertySymbols(thing).length > 0) {\n\t\t\t\t\t\tthrow new DevalueError(\n\t\t\t\t\t\t\t`Cannot stringify POJOs with symbolic keys`,\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const key in thing) {\n\t\t\t\t\t\tkeys.push(`.${key}`);\n\t\t\t\t\t\twalk(thing[key]);\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalk(value);\n\n\tconst names = new Map();\n\n\tArray.from(counts)\n\t\t.filter((entry) => entry[1] > 1)\n\t\t.sort((a, b) => b[1] - a[1])\n\t\t.forEach((entry, i) => {\n\t\t\tnames.set(entry[0], get_name(i));\n\t\t});\n\n\t/**\n\t * @param {any} thing\n\t * @returns {string}\n\t */\n\tfunction stringify(thing) {\n\t\tif (names.has(thing)) {\n\t\t\treturn names.get(thing);\n\t\t}\n\n\t\tif (is_primitive(thing)) {\n\t\t\treturn stringify_primitive(thing);\n\t\t}\n\n\t\tconst type = get_type(thing);\n\n\t\tswitch (type) {\n\t\t\tcase 'Number':\n\t\t\tcase 'String':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn `Object(${stringify(thing.valueOf())})`;\n\n\t\t\tcase 'RegExp':\n\t\t\t\treturn `new RegExp(${stringify_string(thing.source)}, \"${\n\t\t\t\t\tthing.flags\n\t\t\t\t}\")`;\n\n\t\t\tcase 'Date':\n\t\t\t\treturn `new Date(${thing.getTime()})`;\n\n\t\t\tcase 'Array':\n\t\t\t\tconst members = /** @type {any[]} */ (thing).map((v, i) =>\n\t\t\t\t\ti in thing ? stringify(v) : ''\n\t\t\t\t);\n\t\t\t\tconst tail = thing.length === 0 || thing.length - 1 in thing ? '' : ',';\n\t\t\t\treturn `[${members.join(',')}${tail}]`;\n\n\t\t\tcase 'Set':\n\t\t\tcase 'Map':\n\t\t\t\treturn `new ${type}([${Array.from(thing).map(stringify).join(',')}])`;\n\n\t\t\tdefault:\n\t\t\t\tconst obj = `{${Object.keys(thing)\n\t\t\t\t\t.map((key) => `${safe_key(key)}:${stringify(thing[key])}`)\n\t\t\t\t\t.join(',')}}`;\n\t\t\t\tconst proto = Object.getPrototypeOf(thing);\n\t\t\t\tif (proto === null) {\n\t\t\t\t\treturn Object.keys(thing).length > 0\n\t\t\t\t\t\t? `Object.assign(Object.create(null),${obj})`\n\t\t\t\t\t\t: `Object.create(null)`;\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\t\t}\n\t}\n\n\tconst str = stringify(value);\n\n\tif (names.size) {\n\t\t/** @type {string[]} */\n\t\tconst params = [];\n\n\t\t/** @type {string[]} */\n\t\tconst statements = [];\n\n\t\t/** @type {string[]} */\n\t\tconst values = [];\n\n\t\tnames.forEach((name, thing) => {\n\t\t\tparams.push(name);\n\n\t\t\tif (is_primitive(thing)) {\n\t\t\t\tvalues.push(stringify_primitive(thing));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = get_type(thing);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'String':\n\t\t\t\tcase 'Boolean':\n\t\t\t\t\tvalues.push(`Object(${stringify(thing.valueOf())})`);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RegExp':\n\t\t\t\t\tvalues.push(thing.toString());\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Date':\n\t\t\t\t\tvalues.push(`new Date(${thing.getTime()})`);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tvalues.push(`Array(${thing.length})`);\n\t\t\t\t\t/** @type {any[]} */ (thing).forEach((v, i) => {\n\t\t\t\t\t\tstatements.push(`${name}[${i}]=${stringify(v)}`);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Set':\n\t\t\t\t\tvalues.push(`new Set`);\n\t\t\t\t\tstatements.push(\n\t\t\t\t\t\t`${name}.${Array.from(thing)\n\t\t\t\t\t\t\t.map((v) => `add(${stringify(v)})`)\n\t\t\t\t\t\t\t.join('.')}`\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Map':\n\t\t\t\t\tvalues.push(`new Map`);\n\t\t\t\t\tstatements.push(\n\t\t\t\t\t\t`${name}.${Array.from(thing)\n\t\t\t\t\t\t\t.map(([k, v]) => `set(${stringify(k)}, ${stringify(v)})`)\n\t\t\t\t\t\t\t.join('.')}`\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvalues.push(\n\t\t\t\t\t\tObject.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}'\n\t\t\t\t\t);\n\t\t\t\t\tObject.keys(thing).forEach((key) => {\n\t\t\t\t\t\tstatements.push(\n\t\t\t\t\t\t\t`${name}${safe_prop(key)}=${stringify(thing[key])}`\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tstatements.push(`return ${str}`);\n\n\t\treturn `(function(${params.join(',')}){${statements.join(\n\t\t\t';'\n\t\t)}}(${values.join(',')}))`;\n\t} else {\n\t\treturn str;\n\t}\n}\n\n/** @param {number} num */\nfunction get_name(num) {\n\tlet name = '';\n\n\tdo {\n\t\tname = chars[num % chars.length] + name;\n\t\tnum = ~~(num / chars.length) - 1;\n\t} while (num >= 0);\n\n\treturn reserved.test(name) ? `${name}0` : name;\n}\n\n/** @param {string} c */\nfunction escape_unsafe_char(c) {\n\treturn escaped[c] || c;\n}\n\n/** @param {string} str */\nfunction escape_unsafe_chars(str) {\n\treturn str.replace(unsafe_chars, escape_unsafe_char);\n}\n\n/** @param {string} key */\nfunction safe_key(key) {\n\treturn /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key)\n\t\t? key\n\t\t: escape_unsafe_chars(JSON.stringify(key));\n}\n\n/** @param {string} key */\nfunction safe_prop(key) {\n\treturn /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key)\n\t\t? `.${key}`\n\t\t: `[${escape_unsafe_chars(JSON.stringify(key))}]`;\n}\n\n/** @param {any} thing */\nfunction stringify_primitive(thing) {\n\tif (typeof thing === 'string') return stringify_string(thing);\n\tif (thing === void 0) return 'void 0';\n\tif (thing === 0 && 1 / thing < 0) return '-0';\n\tconst str = String(thing);\n\tif (typeof thing === 'number') return str.replace(/^(-)?0\\./, '$1.');\n\tif (typeof thing === 'bigint') return thing + 'n';\n\treturn str;\n}\n","export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n","import {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n */\nexport function parse(serialized) {\n\treturn unflatten(JSON.parse(serialized));\n}\n\n/**\n * Revive a value flattened with `devalue.flatten`\n * @param {number | any[]} parsed\n */\nexport function unflatten(parsed) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/** @param {number} index */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n","import { onMount, tick } from 'svelte';\nimport { make_trackable, decode_params, normalize_path, add_data_suffix } from '../../utils/url.js';\nimport { find_anchor, get_base_uri, scroll_state } from './utils.js';\nimport {\n\tlock_fetch,\n\tunlock_fetch,\n\tinitial_fetch,\n\tsubsequent_fetch,\n\tnative_fetch\n} from './fetcher.js';\nimport { parse } from './parse.js';\n\nimport Root from '__GENERATED__/root.svelte';\nimport { nodes, server_loads, dictionary, matchers, hooks } from '__GENERATED__/client-manifest.js';\nimport { HttpError, Redirect } from '../control.js';\nimport { stores } from './singletons.js';\nimport { unwrap_promises } from '../../utils/promises.js';\nimport * as devalue from 'devalue';\n\nconst SCROLL_KEY = 'sveltekit:scroll';\nconst INDEX_KEY = 'sveltekit:index';\n\nconst routes = parse(nodes, server_loads, dictionary, matchers);\n\nconst default_layout_loader = nodes[0];\nconst default_error_loader = nodes[1];\n\n// we import the root layout/error nodes eagerly, so that\n// connectivity errors after initialisation don't nuke the app\ndefault_layout_loader();\ndefault_error_loader();\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n\n/** @typedef {{ x: number, y: number }} ScrollPosition */\n/** @type {Record<number, ScrollPosition>} */\nlet scroll_positions = {};\ntry {\n\tscroll_positions = JSON.parse(sessionStorage[SCROLL_KEY]);\n} catch {\n\t// do nothing\n}\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n// TODO remove for 1.0\n/** @type {Record<string, true>} */\nlet warned_about_attributes = {};\n\nfunction check_for_removed_attributes() {\n\tconst attrs = ['prefetch', 'noscroll', 'reload'];\n\tfor (const attr of attrs) {\n\t\tif (document.querySelector(`[sveltekit\\\\:${attr}]`)) {\n\t\t\tif (!warned_about_attributes[attr]) {\n\t\t\t\twarned_about_attributes[attr] = true;\n\t\t\t\tconsole.error(\n\t\t\t\t\t`The sveltekit:${attr} attribute has been replaced with data-sveltekit-${attr}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {{\n *   target: Element;\n *   base: string;\n *   trailing_slash: import('types').TrailingSlash;\n * }} opts\n * @returns {import('./types').Client}\n */\nexport function create_client({ target, base, trailing_slash }) {\n\t/** @type {Array<((url: URL) => boolean)>} */\n\tconst invalidated = [];\n\n\t/** @type {{id: string, promise: Promise<import('./types').NavigationResult>} | null} */\n\tlet load_cache = null;\n\n\tconst callbacks = {\n\t\t/** @type {Array<(navigation: import('types').BeforeNavigate) => void>} */\n\t\tbefore_navigate: [],\n\n\t\t/** @type {Array<(navigation: import('types').AfterNavigate) => void>} */\n\t\tafter_navigate: []\n\t};\n\n\t/** @type {import('./types').NavigationState} */\n\tlet current = {\n\t\tbranch: [],\n\t\terror: null,\n\t\t// @ts-ignore - we need the initial value to be null\n\t\turl: null\n\t};\n\n\t/** this being true means we SSR'd */\n\tlet hydrated = false;\n\tlet started = false;\n\tlet autoscroll = true;\n\tlet updating = false;\n\tlet navigating = false;\n\tlet hash_navigating = false;\n\n\tlet force_invalidation = false;\n\n\t/** @type {import('svelte').SvelteComponent} */\n\tlet root;\n\n\t// keeping track of the history index in order to prevent popstate navigation events if needed\n\tlet current_history_index = history.state?.[INDEX_KEY];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{ ...history.state, [INDEX_KEY]: current_history_index },\n\t\t\t'',\n\t\t\tlocation.href\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tif (scroll) {\n\t\thistory.scrollRestoration = 'manual';\n\t\tscrollTo(scroll.x, scroll.y);\n\t}\n\n\t/** @type {import('types').Page} */\n\tlet page;\n\n\t/** @type {{}} */\n\tlet token;\n\n\t/** @type {Promise<void> | null} */\n\tlet pending_invalidate;\n\n\tasync function invalidate() {\n\t\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t\t// is running because subsequent invalidations may make earlier ones outdated,\n\t\t// but batch multiple synchronous invalidations.\n\t\tpending_invalidate = pending_invalidate || Promise.resolve();\n\t\tawait pending_invalidate;\n\t\tpending_invalidate = null;\n\n\t\tconst url = new URL(location.href);\n\t\tconst intent = get_navigation_intent(url, true);\n\t\t// Clear prefetch, it might be affected by the invalidation.\n\t\t// Also solves an edge case where a prefetch is triggered, the navigation for it\n\t\t// was then triggered and is still running while the invalidation kicks in,\n\t\t// at which point the invalidation should take over and \"win\".\n\t\tload_cache = null;\n\t\tawait update(intent, url, []);\n\t}\n\n\t/**\n\t * @param {string | URL} url\n\t * @param {{ noScroll?: boolean; replaceState?: boolean; keepFocus?: boolean; state?: any; invalidateAll?: boolean }} opts\n\t * @param {string[]} redirect_chain\n\t * @param {{}} [nav_token]\n\t */\n\tasync function goto(\n\t\turl,\n\t\t{\n\t\t\tnoScroll = false,\n\t\t\treplaceState = false,\n\t\t\tkeepFocus = false,\n\t\t\tstate = {},\n\t\t\tinvalidateAll = false\n\t\t},\n\t\tredirect_chain,\n\t\tnav_token\n\t) {\n\t\tif (typeof url === 'string') {\n\t\t\turl = new URL(url, get_base_uri(document));\n\t\t}\n\n\t\treturn navigate({\n\t\t\turl,\n\t\t\tscroll: noScroll ? scroll_state() : null,\n\t\t\tkeepfocus: keepFocus,\n\t\t\tredirect_chain,\n\t\t\tdetails: {\n\t\t\t\tstate,\n\t\t\t\treplaceState\n\t\t\t},\n\t\t\tnav_token,\n\t\t\taccepted: () => {\n\t\t\t\tif (invalidateAll) {\n\t\t\t\t\tforce_invalidation = true;\n\t\t\t\t}\n\t\t\t},\n\t\t\tblocked: () => {},\n\t\t\ttype: 'goto'\n\t\t});\n\t}\n\n\t/** @param {URL} url */\n\tasync function prefetch(url) {\n\t\tconst intent = get_navigation_intent(url, false);\n\n\t\tif (!intent) {\n\t\t\tthrow new Error(`Attempted to prefetch a URL that does not belong to this app: ${url}`);\n\t\t}\n\n\t\tload_cache = { id: intent.id, promise: load_route(intent) };\n\n\t\treturn load_cache.promise;\n\t}\n\n\t/**\n\t * Returns `true` if update completes, `false` if it is aborted\n\t * @param {import('./types').NavigationIntent | undefined} intent\n\t * @param {URL} url\n\t * @param {string[]} redirect_chain\n\t * @param {{hash?: string, scroll: { x: number, y: number } | null, keepfocus: boolean, details: { replaceState: boolean, state: any } | null}} [opts]\n\t * @param {{}} [nav_token] To distinguish between different navigation events and determine the latest. Needed for example for redirects to keep the original token\n\t * @param {() => void} [callback]\n\t */\n\tasync function update(intent, url, redirect_chain, opts, nav_token = {}, callback) {\n\t\ttoken = nav_token;\n\t\tlet navigation_result = intent && (await load_route(intent));\n\n\t\tif (!navigation_result) {\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\thandle_error(new Error(`Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\n\t\t// if this is an internal navigation intent, use the normalized\n\t\t// URL for the rest of the function\n\t\turl = intent?.url || url;\n\n\t\t// abort if user navigated during update\n\t\tif (token !== nav_token) return false;\n\n\t\tif (navigation_result.type === 'redirect') {\n\t\t\tif (redirect_chain.length > 10 || redirect_chain.includes(url.pathname)) {\n\t\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\terror: handle_error(new Error('Redirect loop'), { url, params: {}, route: { id: null } }),\n\t\t\t\t\turl,\n\t\t\t\t\troute: { id: null }\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgoto(\n\t\t\t\t\tnew URL(navigation_result.location, url).href,\n\t\t\t\t\t{},\n\t\t\t\t\t[...redirect_chain, url.pathname],\n\t\t\t\t\tnav_token\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (navigation_result.props?.page?.status >= 400) {\n\t\t\tconst updated = await stores.updated.check();\n\t\t\tif (updated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\n\t\t// reset invalidation only after a finished navigation. If there are redirects or\n\t\t// additional invalidations, they should get the same invalidation treatment\n\t\tinvalidated.length = 0;\n\t\tforce_invalidation = false;\n\n\t\tupdating = true;\n\n\t\tif (opts && opts.details) {\n\t\t\tconst { details } = opts;\n\t\t\tconst change = details.replaceState ? 0 : 1;\n\t\t\tdetails.state[INDEX_KEY] = current_history_index += change;\n\t\t\thistory[details.replaceState ? 'replaceState' : 'pushState'](details.state, '', url);\n\t\t}\n\n\t\t// reset prefetch synchronously after the history state has been set to avoid race conditions\n\t\tload_cache = null;\n\n\t\tif (started) {\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\tif (navigation_result.props.page) {\n\t\t\t\tnavigation_result.props.page.url = url;\n\t\t\t}\n\n\t\t\tconst post_update = pre_update();\n\t\t\troot.$set(navigation_result.props);\n\t\t\tpost_update();\n\t\t} else {\n\t\t\tinitialize(navigation_result);\n\t\t}\n\n\t\t// opts must be passed if we're navigating\n\t\tif (opts) {\n\t\t\tconst { scroll, keepfocus } = opts;\n\n\t\t\tif (!keepfocus) {\n\t\t\t\t// Reset page selection and focus\n\t\t\t\t// We try to mimic browsers' behaviour as closely as possible by targeting the\n\t\t\t\t// first scrollable region, but unfortunately it's not a perfect match — e.g.\n\t\t\t\t// shift-tabbing won't immediately cycle up from the end of the page on Chromium\n\t\t\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\t\t\tconst root = document.body;\n\t\t\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\t\t\troot.tabIndex = -1;\n\t\t\t\troot.focus({ preventScroll: true });\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tgetSelection()?.removeAllRanges();\n\t\t\t\t});\n\n\t\t\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\t\t\tif (tabindex !== null) {\n\t\t\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t\t\t} else {\n\t\t\t\t\troot.removeAttribute('tabindex');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// need to render the DOM before we can scroll to the rendered elements\n\t\t\tawait tick();\n\n\t\t\tif (autoscroll) {\n\t\t\t\tconst deep_linked = url.hash && document.getElementById(url.hash.slice(1));\n\t\t\t\tif (scroll) {\n\t\t\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t\t\t} else if (deep_linked) {\n\t\t\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t\t\t// CSS properties.\n\t\t\t\t\tdeep_linked.scrollIntoView();\n\t\t\t\t} else {\n\t\t\t\t\tscrollTo(0, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// in this case we're simply invalidating\n\t\t\tawait tick();\n\t\t}\n\n\t\tautoscroll = true;\n\n\t\tif (navigation_result.props.page) {\n\t\t\tpage = navigation_result.props.page;\n\t\t}\n\n\t\tif (callback) callback();\n\n\t\tupdating = false;\n\t}\n\n\t/** @param {import('./types').NavigationFinished} result */\n\tfunction initialize(result) {\n\t\tcurrent = result.state;\n\n\t\tconst style = document.querySelector('style[data-sveltekit]');\n\t\tif (style) style.remove();\n\n\t\tpage = result.props.page;\n\n\t\tconst post_update = pre_update();\n\t\troot = new Root({\n\t\t\ttarget,\n\t\t\tprops: { ...result.props, stores },\n\t\t\thydrate: true\n\t\t});\n\t\tpost_update();\n\n\t\t/** @type {import('types').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: add_url_properties('to', {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t}),\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter'\n\t\t};\n\t\tcallbacks.after_navigate.forEach((fn) => fn(navigation));\n\n\t\tstarted = true;\n\t}\n\n\t/**\n\t *\n\t * @param {{\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   branch: Array<import('./types').BranchNode | undefined>;\n\t *   status: number;\n\t *   error: App.Error | null;\n\t *   route: import('types').CSRRoute | null;\n\t *   form?: Record<string, any> | null;\n\t * }} opts\n\t */\n\tasync function get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus,\n\t\terror,\n\t\troute,\n\t\tform\n\t}) {\n\t\tconst filtered = /** @type {import('./types').BranchNode[] } */ (branch.filter(Boolean));\n\n\t\t/** @type {import('./types').NavigationFinished} */\n\t\tconst result = {\n\t\t\ttype: 'loaded',\n\t\t\tstate: {\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\tbranch,\n\t\t\t\terror,\n\t\t\t\troute\n\t\t\t},\n\t\t\tprops: {\n\t\t\t\tcomponents: filtered.map((branch_node) => branch_node.node.component)\n\t\t\t}\n\t\t};\n\n\t\tif (form !== undefined) {\n\t\t\tresult.props.form = form;\n\t\t}\n\n\t\tlet data = {};\n\t\tlet data_changed = !page;\n\t\tfor (let i = 0; i < filtered.length; i += 1) {\n\t\t\tconst node = filtered[i];\n\t\t\tdata = { ...data, ...node.data };\n\n\t\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\t\tif (data_changed || !current.branch.some((previous) => previous === node)) {\n\t\t\t\tresult.props[`data_${i}`] = data;\n\t\t\t\tdata_changed = data_changed || Object.keys(node.data ?? {}).length > 0;\n\t\t\t}\n\t\t}\n\t\tif (!data_changed) {\n\t\t\t// If nothing was added, and the object entries are the same length, this means\n\t\t\t// that nothing was removed either and therefore the data is the same as the previous one.\n\t\t\t// This would be more readable with a separate boolean but that would cost us some bytes.\n\t\t\tdata_changed = Object.keys(page.data).length !== Object.keys(data).length;\n\t\t}\n\n\t\tconst page_changed =\n\t\t\t!current.url ||\n\t\t\turl.href !== current.url.href ||\n\t\t\tcurrent.error !== error ||\n\t\t\tform !== undefined ||\n\t\t\tdata_changed;\n\n\t\tif (page_changed) {\n\t\t\tresult.props.page = {\n\t\t\t\terror,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tstatus,\n\t\t\t\turl,\n\t\t\t\tform,\n\t\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\t\tdata: data_changed ? data : page.data\n\t\t\t};\n\n\t\t\t// TODO remove this for 1.0\n\t\t\t/**\n\t\t\t * @param {string} property\n\t\t\t * @param {string} replacement\n\t\t\t */\n\t\t\tconst print_error = (property, replacement) => {\n\t\t\t\tObject.defineProperty(result.props.page, property, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\tthrow new Error(`$page.${property} has been replaced by $page.url.${replacement}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tprint_error('origin', 'origin');\n\t\t\tprint_error('path', 'pathname');\n\t\t\tprint_error('query', 'searchParams');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Call the load function of the given node, if it exists.\n\t * If `server_data` is passed, this is treated as the initial run and the page endpoint is not requested.\n\t *\n\t * @param {{\n\t *   loader: import('types').CSRPageNodeLoader;\n\t * \t parent: () => Promise<Record<string, any>>;\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   route: { id: string | null };\n\t * \t server_data_node: import('./types').DataNode | null;\n\t * }} options\n\t * @returns {Promise<import('./types').BranchNode>}\n\t */\n\tasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t\t/** @type {Record<string, any> | null} */\n\t\tlet data = null;\n\n\t\t/** @type {import('types').Uses} */\n\t\tconst uses = {\n\t\t\tdependencies: new Set(),\n\t\t\tparams: new Set(),\n\t\t\tparent: false,\n\t\t\troute: false,\n\t\t\turl: false\n\t\t};\n\n\t\tconst node = await loader();\n\n\t\tif (node.shared?.load) {\n\t\t\t/** @param {string[]} deps */\n\t\t\tfunction depends(...deps) {\n\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\t\tuses.dependencies.add(href);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {import('types').LoadEvent} */\n\t\t\tconst load_input = {\n\t\t\t\troute: {\n\t\t\t\t\tget id() {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t\treturn route.id;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tparams: new Proxy(params, {\n\t\t\t\t\tget: (target, key) => {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tdata: server_data_node?.data ?? null,\n\t\t\t\turl: make_trackable(url, () => {\n\t\t\t\t\tuses.url = true;\n\t\t\t\t}),\n\t\t\t\tasync fetch(resource, init) {\n\t\t\t\t\tlet requested;\n\n\t\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t\trequested = resource.url;\n\n\t\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\t\tinit = {\n\t\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t\theaders: resource.headers,\n\t\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t\t...init\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequested = resource;\n\t\t\t\t\t}\n\n\t\t\t\t\t// we must fixup relative urls so they are resolved from the target page\n\t\t\t\t\tconst resolved = new URL(requested, url).href;\n\t\t\t\t\tdepends(resolved);\n\n\t\t\t\t\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\t\t\t\t\treturn started\n\t\t\t\t\t\t? subsequent_fetch(resolved, init)\n\t\t\t\t\t\t: initial_fetch(requested, resolved, init);\n\t\t\t\t},\n\t\t\t\tsetHeaders: () => {}, // noop\n\t\t\t\tdepends,\n\t\t\t\tparent() {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t\treturn parent();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// TODO remove this for 1.0\n\t\t\tObject.defineProperties(load_input, {\n\t\t\t\tprops: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'@migration task: Replace `props` with `data` stuff https://github.com/sveltejs/kit/discussions/5774#discussioncomment-3292693'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t},\n\t\t\t\tsession: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'session is no longer available. See https://github.com/sveltejs/kit/discussions/5883'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t},\n\t\t\t\tstuff: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'@migration task: Remove stuff https://github.com/sveltejs/kit/discussions/5774#discussioncomment-3292693'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t},\n\t\t\t\trouteId: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error('routeId has been replaced by route.id');\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (import.meta.env.DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tlock_fetch();\n\t\t\t\t\tdata = (await node.shared.load.call(null, load_input)) ?? null;\n\t\t\t\t} finally {\n\t\t\t\t\tunlock_fetch();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdata = (await node.shared.load.call(null, load_input)) ?? null;\n\t\t\t}\n\t\t\tdata = data ? await unwrap_promises(data) : null;\n\t\t}\n\n\t\treturn {\n\t\t\tnode,\n\t\t\tloader,\n\t\t\tserver: server_data_node,\n\t\t\tshared: node.shared?.load ? { type: 'data', data, uses } : null,\n\t\t\tdata: data ?? server_data_node?.data ?? null\n\t\t};\n\t}\n\n\t/**\n\t * @param {boolean} parent_changed\n\t * @param {boolean} route_changed\n\t * @param {boolean} url_changed\n\t * @param {import('types').Uses | undefined} uses\n\t * @param {Record<string, string>} params\n\t */\n\tfunction has_changed(parent_changed, route_changed, url_changed, uses, params) {\n\t\tif (force_invalidation) return true;\n\n\t\tif (!uses) return false;\n\n\t\tif (uses.parent && parent_changed) return true;\n\t\tif (uses.route && route_changed) return true;\n\t\tif (uses.url && url_changed) return true;\n\n\t\tfor (const param of uses.params) {\n\t\t\tif (params[param] !== current.params[param]) return true;\n\t\t}\n\n\t\tfor (const href of uses.dependencies) {\n\t\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n\t * @param {import('./types').DataNode | null} [previous]\n\t * @returns {import('./types').DataNode | null}\n\t */\n\tfunction create_data_node(node, previous) {\n\t\tif (node?.type === 'data') {\n\t\t\treturn {\n\t\t\t\ttype: 'data',\n\t\t\t\tdata: node.data,\n\t\t\t\tuses: {\n\t\t\t\t\tdependencies: new Set(node.uses.dependencies ?? []),\n\t\t\t\t\tparams: new Set(node.uses.params ?? []),\n\t\t\t\t\tparent: !!node.uses.parent,\n\t\t\t\t\troute: !!node.uses.route,\n\t\t\t\t\turl: !!node.uses.url\n\t\t\t\t}\n\t\t\t};\n\t\t} else if (node?.type === 'skip') {\n\t\t\treturn previous ?? null;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @param {import('./types').NavigationIntent} intent\n\t * @returns {Promise<import('./types').NavigationResult>}\n\t */\n\tasync function load_route({ id, invalidating, url, params, route }) {\n\t\tif (load_cache?.id === id) {\n\t\t\treturn load_cache.promise;\n\t\t}\n\n\t\tconst { errors, layouts, leaf } = route;\n\n\t\tconst loaders = [...layouts, leaf];\n\n\t\t// preload modules to avoid waterfall, but handle rejections\n\t\t// so they don't get reported to Sentry et al (we don't need\n\t\t// to act on the failures at this point)\n\t\terrors.forEach((loader) => loader?.().catch(() => {}));\n\t\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t\t/** @type {import('types').ServerData | null} */\n\t\tlet server_data = null;\n\n\t\tconst url_changed = current.url ? id !== current.url.pathname + current.url.search : false;\n\t\tconst route_changed = current.route ? id !== current.route.id : false;\n\n\t\tconst invalid_server_nodes = loaders.reduce((acc, loader, i) => {\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst invalid =\n\t\t\t\t!!loader?.[0] &&\n\t\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\t\thas_changed(\n\t\t\t\t\t\tacc.some(Boolean),\n\t\t\t\t\t\troute_changed,\n\t\t\t\t\t\turl_changed,\n\t\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\t\tparams\n\t\t\t\t\t));\n\n\t\t\tacc.push(invalid);\n\t\t\treturn acc;\n\t\t}, /** @type {boolean[]} */ ([]));\n\n\t\tif (invalid_server_nodes.some(Boolean)) {\n\t\t\ttry {\n\t\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t\t} catch (error) {\n\t\t\t\treturn load_root_error_page({\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\terror: handle_error(error, { url, params, route: { id: route.id } }),\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (server_data.type === 'redirect') {\n\t\t\t\treturn server_data;\n\t\t\t}\n\t\t}\n\n\t\tconst server_data_nodes = server_data?.nodes;\n\n\t\tlet parent_changed = false;\n\n\t\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\t\tif (!loader) return;\n\n\t\t\t/** @type {import('./types').BranchNode | undefined} */\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t\t// re-use data from previous load if it's still valid\n\t\t\tconst valid =\n\t\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\t\tloader[1] === previous?.loader &&\n\t\t\t\t!has_changed(parent_changed, route_changed, url_changed, previous.shared?.uses, params);\n\t\t\tif (valid) return previous;\n\n\t\t\tparent_changed = true;\n\n\t\t\tif (server_data_node?.type === 'error') {\n\t\t\t\t// rethrow and catch below\n\t\t\t\tthrow server_data_node;\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: loader[1],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(\n\t\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : server_data_node ?? null,\n\t\t\t\t\tprevious?.server\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\t// if we don't do this, rejections will be unhandled\n\t\tfor (const p of branch_promises) p.catch(() => {});\n\n\t\t/** @type {Array<import('./types').BranchNode | undefined>} */\n\t\tconst branch = [];\n\n\t\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\t\tif (loaders[i]) {\n\t\t\t\ttry {\n\t\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tlet status = 500;\n\t\t\t\t\t/** @type {App.Error} */\n\t\t\t\t\tlet error;\n\n\t\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\t\tstatus = err.status;\n\t\t\t\t\t\terror = err.body;\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror = handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t\t}\n\n\t\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\t\tif (error_load) {\n\t\t\t\t\t\treturn await get_navigation_result_from_branch({\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\troute\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if we get here, it's because the root `load` function failed,\n\t\t\t\t\t\t// and we need to fall back to the server\n\t\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\t\tbranch.push(undefined);\n\t\t\t}\n\t\t}\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus: 200,\n\t\t\terror: null,\n\t\t\troute,\n\t\t\t// Reset `form` on navigation, but not invalidation\n\t\t\tform: invalidating ? undefined : null\n\t\t});\n\t}\n\n\t/**\n\t * @param {number} i Start index to backtrack from\n\t * @param {Array<import('./types').BranchNode | undefined>} branch Branch to backtrack\n\t * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n\t * @returns {Promise<{idx: number; node: import('./types').BranchNode} | undefined>}\n\t */\n\tasync function load_nearest_error_page(i, branch, errors) {\n\t\twhile (i--) {\n\t\t\tif (errors[i]) {\n\t\t\t\tlet j = i;\n\t\t\t\twhile (!branch[j]) j -= 1;\n\t\t\t\ttry {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tidx: j + 1,\n\t\t\t\t\t\tnode: {\n\t\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\t\tshared: null\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {{\n\t *   status: number;\n\t *   error: App.Error;\n\t *   url: URL;\n\t *   route: { id: string | null }\n\t * }} opts\n\t * @returns {Promise<import('./types').NavigationFinished>}\n\t */\n\tasync function load_root_error_page({ status, error, url, route }) {\n\t\t/** @type {Record<string, string>} */\n\t\tconst params = {}; // error page does not have params\n\n\t\tconst node = await default_layout_loader();\n\n\t\t/** @type {import('types').ServerDataNode | null} */\n\t\tlet server_data_node = null;\n\n\t\tif (node.server) {\n\t\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t\t// existing root layout data\n\t\t\ttry {\n\t\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\t\tif (\n\t\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t\t) {\n\t\t\t\t\tthrow 0;\n\t\t\t\t}\n\n\t\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t\t} catch {\n\t\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\t\tif (url.origin !== location.origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\t\tawait native_navigation(url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tshared: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t}\n\n\t/**\n\t * @param {URL} url\n\t * @param {boolean} invalidating\n\t */\n\tfunction get_navigation_intent(url, invalidating) {\n\t\tif (is_external_url(url)) return;\n\n\t\tconst path = decodeURI(url.pathname.slice(base.length) || '/');\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\tconst normalized = new URL(\n\t\t\t\t\turl.origin + normalize_path(url.pathname, trailing_slash) + url.search + url.hash\n\t\t\t\t);\n\t\t\t\tconst id = normalized.pathname + normalized.search;\n\t\t\t\t/** @type {import('./types').NavigationIntent} */\n\t\t\t\tconst intent = { id, invalidating, route, params: decode_params(params), url: normalized };\n\t\t\t\treturn intent;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @param {URL} url */\n\tfunction is_external_url(url) {\n\t\treturn url.origin !== location.origin || !url.pathname.startsWith(base);\n\t}\n\n\t/**\n\t * @param {{\n\t *   url: URL;\n\t *   type: import('types').NavigationType;\n\t *   intent?: import('./types').NavigationIntent;\n\t *   delta?: number;\n\t * }} opts\n\t */\n\tfunction before_navigate({ url, type, intent, delta }) {\n\t\tlet should_block = false;\n\n\t\t/** @type {import('types').Navigation} */\n\t\tconst navigation = {\n\t\t\tfrom: add_url_properties('from', {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: current.url\n\t\t\t}),\n\t\t\tto: add_url_properties('to', {\n\t\t\t\tparams: intent?.params ?? null,\n\t\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\t\turl\n\t\t\t}),\n\t\t\twillUnload: !intent,\n\t\t\ttype\n\t\t};\n\n\t\tif (delta !== undefined) {\n\t\t\tnavigation.delta = delta;\n\t\t}\n\n\t\tconst cancellable = {\n\t\t\t...navigation,\n\t\t\tcancel: () => {\n\t\t\t\tshould_block = true;\n\t\t\t}\n\t\t};\n\n\t\tcallbacks.before_navigate.forEach((fn) => fn(cancellable));\n\n\t\treturn should_block ? null : navigation;\n\t}\n\n\t/**\n\t * @param {{\n\t *   url: URL;\n\t *   scroll: { x: number, y: number } | null;\n\t *   keepfocus: boolean;\n\t *   redirect_chain: string[];\n\t *   details: {\n\t *     replaceState: boolean;\n\t *     state: any;\n\t *   } | null;\n\t *   type: import('types').NavigationType;\n\t *   delta?: number;\n\t *   nav_token?: {};\n\t *   accepted: () => void;\n\t *   blocked: () => void;\n\t * }} opts\n\t */\n\tasync function navigate({\n\t\turl,\n\t\tscroll,\n\t\tkeepfocus,\n\t\tredirect_chain,\n\t\tdetails,\n\t\ttype,\n\t\tdelta,\n\t\tnav_token,\n\t\taccepted,\n\t\tblocked\n\t}) {\n\t\tconst intent = get_navigation_intent(url, false);\n\t\tconst navigation = before_navigate({ url, type, delta, intent });\n\n\t\tif (!navigation) {\n\t\t\tblocked();\n\t\t\treturn;\n\t\t}\n\n\t\tupdate_scroll_positions(current_history_index);\n\n\t\taccepted();\n\n\t\tnavigating = true;\n\n\t\tif (started) {\n\t\t\tstores.navigating.set(navigation);\n\t\t}\n\n\t\tawait update(\n\t\t\tintent,\n\t\t\turl,\n\t\t\tredirect_chain,\n\t\t\t{\n\t\t\t\tscroll,\n\t\t\t\tkeepfocus,\n\t\t\t\tdetails\n\t\t\t},\n\t\t\tnav_token,\n\t\t\t() => {\n\t\t\t\tnavigating = false;\n\t\t\t\tcallbacks.after_navigate.forEach((fn) =>\n\t\t\t\t\tfn(/** @type {import('types').AfterNavigate} */ (navigation))\n\t\t\t\t);\n\t\t\t\tstores.navigating.set(null);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n\t * @param {URL} url\n\t * @param {{ id: string | null }} route\n\t * @param {App.Error} error\n\t * @param {number} status\n\t * @returns {Promise<import('./types').NavigationFinished>}\n\t */\n\tasync function server_fallback(url, route, error, status) {\n\t\tif (url.origin === location.origin && url.pathname === location.pathname && !hydrated) {\n\t\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t\t// which means no SSR, which means we would end up in an endless loop\n\t\t\treturn await load_root_error_page({\n\t\t\t\tstatus,\n\t\t\t\terror,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\t\treturn await native_navigation(url);\n\t}\n\n\t/**\n\t * Loads `href` the old-fashioned way, with a full page reload.\n\t * Returns a `Promise` that never resolves (to prevent any\n\t * subsequent work, e.g. history manipulation, from happening)\n\t * @param {URL} url\n\t */\n\tfunction native_navigation(url) {\n\t\tlocation.href = url.href;\n\t\treturn new Promise(() => {});\n\t}\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (current.error) location.reload();\n\t\t});\n\t}\n\n\treturn {\n\t\tafter_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.after_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.after_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.after_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tbefore_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.before_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.before_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.before_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tdisable_scroll_handling: () => {\n\t\t\tif (import.meta.env.DEV && started && !updating) {\n\t\t\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t\t\t}\n\n\t\t\tif (updating || !started) {\n\t\t\t\tautoscroll = false;\n\t\t\t}\n\t\t},\n\n\t\tgoto: (href, opts = {}) => {\n\t\t\t// TODO remove for 1.0\n\t\t\tif ('keepfocus' in opts) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'`keepfocus` has been renamed to `keepFocus` (note the difference in casing)'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ('noscroll' in opts) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'`noscroll` has been renamed to `noScroll` (note the difference in casing)'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn goto(href, opts, []);\n\t\t},\n\n\t\tinvalidate: (resource) => {\n\t\t\tif (resource === undefined) {\n\t\t\t\t// TODO remove for 1.0\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'`invalidate()` (with no arguments) has been replaced by `invalidateAll()`'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof resource === 'function') {\n\t\t\t\tinvalidated.push(resource);\n\t\t\t} else {\n\t\t\t\tconst { href } = new URL(resource, location.href);\n\t\t\t\tinvalidated.push((url) => url.href === href);\n\t\t\t}\n\n\t\t\treturn invalidate();\n\t\t},\n\n\t\tinvalidateAll: () => {\n\t\t\tforce_invalidation = true;\n\t\t\treturn invalidate();\n\t\t},\n\n\t\tprefetch: async (href) => {\n\t\t\tconst url = new URL(href, get_base_uri(document));\n\t\t\tawait prefetch(url);\n\t\t},\n\n\t\t// TODO rethink this API\n\t\tprefetch_routes: async (pathnames) => {\n\t\t\tconst matching = pathnames\n\t\t\t\t? routes.filter((route) => pathnames.some((pathname) => route.exec(pathname)))\n\t\t\t\t: routes;\n\n\t\t\tconst promises = matching.map((r) => {\n\t\t\t\treturn Promise.all([...r.layouts, r.leaf].map((load) => load?.[1]()));\n\t\t\t});\n\n\t\t\tawait Promise.all(promises);\n\t\t},\n\n\t\tapply_action: async (result) => {\n\t\t\tif (result.type === 'error') {\n\t\t\t\tconst url = new URL(location.href);\n\n\t\t\t\tconst { branch, route } = current;\n\t\t\t\tif (!route) return;\n\n\t\t\t\tconst error_load = await load_nearest_error_page(\n\t\t\t\t\tcurrent.branch.length,\n\t\t\t\t\tbranch,\n\t\t\t\t\troute.errors\n\t\t\t\t);\n\t\t\t\tif (error_load) {\n\t\t\t\t\tconst navigation_result = await get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams: current.params,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus: 500, // TODO might not be 500?\n\t\t\t\t\t\terror: result.error,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\n\t\t\t\t\tcurrent = navigation_result.state;\n\n\t\t\t\t\tconst post_update = pre_update();\n\t\t\t\t\troot.$set(navigation_result.props);\n\t\t\t\t\tpost_update();\n\t\t\t\t}\n\t\t\t} else if (result.type === 'redirect') {\n\t\t\t\tgoto(result.location, { invalidateAll: true }, []);\n\t\t\t} else {\n\t\t\t\t/** @type {Record<string, any>} */\n\t\t\t\tconst props = {\n\t\t\t\t\tform: result.data,\n\t\t\t\t\tpage: { ...page, form: result.data, status: result.status }\n\t\t\t\t};\n\t\t\t\tconst post_update = pre_update();\n\t\t\t\troot.$set(props);\n\t\t\t\tpost_update();\n\t\t\t}\n\t\t},\n\n\t\t_start_router: () => {\n\t\t\thistory.scrollRestoration = 'manual';\n\n\t\t\t// Adopted from Nuxt.js\n\t\t\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t\t\t// and back-navigation from other pages to use the browser to restore the\n\t\t\t// scrolling position.\n\t\t\taddEventListener('beforeunload', (e) => {\n\t\t\t\tlet should_block = false;\n\n\t\t\t\tif (!navigating) {\n\t\t\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t\t\t/** @type {import('types').BeforeNavigate} */\n\t\t\t\t\tconst navigation = {\n\t\t\t\t\t\tfrom: add_url_properties('from', {\n\t\t\t\t\t\t\tparams: current.params,\n\t\t\t\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\t\t\t\turl: current.url\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tto: null,\n\t\t\t\t\t\twillUnload: true,\n\t\t\t\t\t\ttype: 'leave',\n\t\t\t\t\t\tcancel: () => (should_block = true)\n\t\t\t\t\t};\n\n\t\t\t\t\tcallbacks.before_navigate.forEach((fn) => fn(navigation));\n\t\t\t\t}\n\n\t\t\t\tif (should_block) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.returnValue = '';\n\t\t\t\t} else {\n\t\t\t\t\thistory.scrollRestoration = 'auto';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('visibilitychange', () => {\n\t\t\t\tif (document.visibilityState === 'hidden') {\n\t\t\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsessionStorage[SCROLL_KEY] = JSON.stringify(scroll_positions);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/** @param {Event} event */\n\t\t\tconst trigger_prefetch = (event) => {\n\t\t\t\tconst { url, options } = find_anchor(event);\n\t\t\t\tif (url && options.prefetch) {\n\t\t\t\t\tif (is_external_url(url)) return;\n\t\t\t\t\tprefetch(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/** @type {NodeJS.Timeout} */\n\t\t\tlet mousemove_timeout;\n\n\t\t\t/** @param {MouseEvent|TouchEvent} event */\n\t\t\tconst handle_mousemove = (event) => {\n\t\t\t\tclearTimeout(mousemove_timeout);\n\t\t\t\tmousemove_timeout = setTimeout(() => {\n\t\t\t\t\t// event.composedPath(), which is used in find_anchor, will be empty if the event is read in a timeout\n\t\t\t\t\t// add a layer of indirection to address that\n\t\t\t\t\tevent.target?.dispatchEvent(\n\t\t\t\t\t\tnew CustomEvent('sveltekit:trigger_prefetch', { bubbles: true })\n\t\t\t\t\t);\n\t\t\t\t}, 20);\n\t\t\t};\n\n\t\t\taddEventListener('touchstart', trigger_prefetch);\n\t\t\taddEventListener('mousemove', handle_mousemove);\n\t\t\taddEventListener('sveltekit:trigger_prefetch', trigger_prefetch);\n\n\t\t\t/** @param {MouseEvent} event */\n\t\t\taddEventListener('click', (event) => {\n\t\t\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\t\t\tif (event.button || event.which !== 1) return;\n\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\tconst { a, url, options } = find_anchor(event);\n\t\t\t\tif (!a || !url) return;\n\n\t\t\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t\t\t// See:\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\t\t\tif (\n\t\t\t\t\t!is_svg_a_element &&\n\t\t\t\t\turl.protocol !== location.protocol &&\n\t\t\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\tif (a.hasAttribute('download')) return;\n\n\t\t\t\t// Ignore the following but fire beforeNavigate\n\t\t\t\tconst rel = (a.getAttribute('rel') || '').split(/\\s+/);\n\t\t\t\tif (\n\t\t\t\t\trel.includes('external') ||\n\t\t\t\t\toptions.reload ||\n\t\t\t\t\t(is_svg_a_element ? a.target.baseVal : a.target)\n\t\t\t\t) {\n\t\t\t\t\tconst navigation = before_navigate({ url, type: 'link' });\n\t\t\t\t\tif (!navigation) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\tnavigating = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t\t\t// This will ensure the `hashchange` event is fired\n\t\t\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\t\t\tconst [base, hash] = url.href.split('#');\n\t\t\t\tif (hash !== undefined && base === location.href.split('#')[0]) {\n\t\t\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\t\t\t// TODO why not update history here directly?\n\t\t\t\t\thash_navigating = true;\n\n\t\t\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\t\t\tcurrent.url = url;\n\t\t\t\t\tstores.page.set({ ...page, url });\n\t\t\t\t\tstores.page.notify();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnavigate({\n\t\t\t\t\turl,\n\t\t\t\t\tscroll: options.noscroll ? scroll_state() : null,\n\t\t\t\t\tkeepfocus: false,\n\t\t\t\t\tredirect_chain: [],\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\tstate: {},\n\t\t\t\t\t\treplaceState: url.href === location.href\n\t\t\t\t\t},\n\t\t\t\t\taccepted: () => event.preventDefault(),\n\t\t\t\t\tblocked: () => event.preventDefault(),\n\t\t\t\t\ttype: 'link'\n\t\t\t\t});\n\t\t\t});\n\n\t\t\taddEventListener('popstate', (event) => {\n\t\t\t\tif (event.state) {\n\t\t\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\t\t\tif (event.state[INDEX_KEY] === current_history_index) return;\n\n\t\t\t\t\tconst delta = event.state[INDEX_KEY] - current_history_index;\n\n\t\t\t\t\tnavigate({\n\t\t\t\t\t\turl: new URL(location.href),\n\t\t\t\t\t\tscroll: scroll_positions[event.state[INDEX_KEY]],\n\t\t\t\t\t\tkeepfocus: false,\n\t\t\t\t\t\tredirect_chain: [],\n\t\t\t\t\t\tdetails: null,\n\t\t\t\t\t\taccepted: () => {\n\t\t\t\t\t\t\tcurrent_history_index = event.state[INDEX_KEY];\n\t\t\t\t\t\t},\n\t\t\t\t\t\tblocked: () => {\n\t\t\t\t\t\t\thistory.go(-delta);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'popstate',\n\t\t\t\t\t\tdelta\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('hashchange', () => {\n\t\t\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t\t\t// we need to update history, otherwise we have to leave it alone\n\t\t\t\tif (hash_navigating) {\n\t\t\t\t\thash_navigating = false;\n\t\t\t\t\thistory.replaceState(\n\t\t\t\t\t\t{ ...history.state, [INDEX_KEY]: ++current_history_index },\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tlocation.href\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t\t\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t\t\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\t\t\tfor (const link of document.querySelectorAll('link')) {\n\t\t\t\tif (link.rel === 'icon') link.href = link.href;\n\t\t\t}\n\n\t\t\taddEventListener('pageshow', (event) => {\n\t\t\t\t// If the user navigates to another site and then uses the back button and\n\t\t\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t\t\t// the navigation away from it was successful.\n\t\t\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\t\t\tif (event.persisted) {\n\t\t\t\t\tstores.navigating.set(null);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_hydrate: async ({ status, error, node_ids, params, route, data: server_data_nodes, form }) => {\n\t\t\thydrated = true;\n\n\t\t\tconst url = new URL(location.href);\n\n\t\t\t/** @type {import('./types').NavigationFinished | undefined} */\n\t\t\tlet result;\n\n\t\t\ttry {\n\t\t\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\t\t\tconst server_data_node = server_data_nodes[i];\n\n\t\t\t\t\treturn load_node({\n\t\t\t\t\t\tloader: nodes[n],\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute,\n\t\t\t\t\t\tparent: async () => {\n\t\t\t\t\t\t\tconst data = {};\n\t\t\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tresult = await get_navigation_result_from_branch({\n\t\t\t\t\turl,\n\t\t\t\t\tparams,\n\t\t\t\t\tbranch: await Promise.all(branch_promises),\n\t\t\t\t\tstatus,\n\t\t\t\t\terror,\n\t\t\t\t\tform,\n\t\t\t\t\troute: routes.find(({ id }) => id === route.id) ?? null\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof Redirect) {\n\t\t\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t\t\t// a redirect but only in the browser\n\t\t\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult = await load_root_error_page({\n\t\t\t\t\tstatus: error instanceof HttpError ? error.status : 500,\n\t\t\t\t\terror: handle_error(error, { url, params, route }),\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tinitialize(result);\n\t\t}\n\t};\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerData>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\n\tconst res = await native_fetch(data_url.href, {\n\t\theaders: {\n\t\t\t'x-sveltekit-invalidated': invalid.map((x) => (x ? '1' : '')).join(',')\n\t\t}\n\t});\n\tconst data = await res.json();\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\tthrow new Error(data);\n\t}\n\n\t// revive devalue-flattened data\n\tdata.nodes?.forEach((/** @type {any} */ node) => {\n\t\tif (node?.type === 'data') {\n\t\t\tnode.data = devalue.unflatten(node.data);\n\t\t\tnode.uses = {\n\t\t\t\tdependencies: new Set(node.uses.dependencies ?? []),\n\t\t\t\tparams: new Set(node.uses.params ?? []),\n\t\t\t\tparent: !!node.uses.parent,\n\t\t\t\troute: !!node.uses.route,\n\t\t\t\turl: !!node.uses.url\n\t\t\t};\n\t\t}\n\t});\n\n\treturn data;\n}\n\n/**\n * @param {unknown} error\n * @param {import('types').NavigationEvent} event\n * @returns {App.Error}\n */\nfunction handle_error(error, event) {\n\tif (error instanceof HttpError) {\n\t\treturn error.body;\n\t}\n\treturn (\n\t\thooks.handleError({ error, event }) ??\n\t\t/** @type {any} */ ({ message: event.route.id != null ? 'Internal Error' : 'Not Found' })\n\t);\n}\n\n// TODO remove for 1.0\nconst properties = [\n\t'hash',\n\t'href',\n\t'host',\n\t'hostname',\n\t'origin',\n\t'pathname',\n\t'port',\n\t'protocol',\n\t'search',\n\t'searchParams',\n\t'toString',\n\t'toJSON'\n];\n\n/**\n * @param {'from' | 'to'} type\n * @param {import('types').NavigationTarget} target\n */\nfunction add_url_properties(type, target) {\n\tfor (const prop of properties) {\n\t\tObject.defineProperty(target, prop, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The navigation shape changed - ${type}.${prop} should now be ${type}.url.${prop}`\n\t\t\t\t);\n\t\t\t},\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tObject.defineProperty(target, 'routeId', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t`The navigation shape changed - ${type}.routeId should now be ${type}.route.id`\n\t\t\t);\n\t\t},\n\t\tenumerable: false\n\t});\n\n\treturn target;\n}\n\nfunction pre_update() {\n\tif (__SVELTEKIT_DEV__) {\n\t\treturn () => {\n\t\t\tcheck_for_removed_attributes();\n\t\t};\n\t}\n\n\treturn () => {};\n}\n\nif (__SVELTEKIT_DEV__) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst warn = console.warn;\n\tconsole.warn = (...args) => {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\twarn(...args);\n\t};\n}\n","import { create_client } from './client.js';\nimport { init } from './singletons.js';\nimport { set_paths } from '../paths.js';\nimport { set_public_env } from '../env-public.js';\n\n/**\n * @param {{\n *   env: Record<string, string>;\n *   hydrate: Parameters<import('./types').Client['_hydrate']>[0];\n *   paths: {\n *     assets: string;\n *     base: string;\n *   },\n *   target: Element;\n *   trailing_slash: import('types').TrailingSlash;\n * }} opts\n */\nexport async function start({ env, hydrate, paths, target, trailing_slash }) {\n\tset_public_env(env);\n\tset_paths(paths);\n\n\tconst client = create_client({\n\t\ttarget,\n\t\tbase: paths.base,\n\t\ttrailing_slash\n\t});\n\n\tinit({ client });\n\n\tif (hydrate) {\n\t\tawait client._hydrate(hydrate);\n\t} else {\n\t\tclient.goto(location.href, { replaceState: true });\n\t}\n\n\tclient._start_router();\n}\n"],"file":"_app/immutable/start-0a352c21.js"}